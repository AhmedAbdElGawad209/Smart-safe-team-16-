
AVRASM ver. 2.2.8  D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm Sat Jan 08 07:38:10 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(3): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\delay_function.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(4): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\set stack.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(5): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\compare.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(6): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\keypad.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(7): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\initUART.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(8): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\send_string.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(9): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\receive_char.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(3): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\delay_function.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(4): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\set stack.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(5): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\compare.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(6): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\keypad.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(7): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\initUART.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(8): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\send_string.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(9): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\receive_char.inc'
                                 
                                 ;	including all libraries................................................
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 .include	"m32def.inc"			;atmega32	library
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 .include	"delay_function.inc"
                                 
                                 ;push the 3 registers that we will use  
                                 push r20 
                                 push r24
                                 push r25
                                 
                                 
                                 ldi r20,@0/10		; the delay time entered by the user 
                                 
                                 outerloop:										; outer loop
                                 			ldi		r24,LOW(2499)					; initialize itirators at the begining each time
                                 			ldi		r25,HIGH(2499) 
                                 
                                 innerloop:
                                 			sbiw	r24,1
                                 			brne	innerloop					; loop (i) times
                                 
                                 			dec		r20 
                                 			brne	outerloop					; loop (r20) times
                                 
                                 ;pop the registers again
                                 pop r25
                                 pop r24
                                 pop r20
                                 .include	"set stack.inc"
                                 
                                 
                                 ldi		r16,LOW(RAMEND)  ;first address of stack segmant 
                                 out		SPL,r16
                                 ldi		r16,HIGH(RAMEND) 
                                 out		SPH,r16
                                 
                                 .include	"compare.inc"
                                 
                                 	cpi	r23,@0
                                 	brne	no
                                 	cpi	r22,@1
                                 	brne	no
                                 	cpi	r21,@2
                                 	brne	no
                                 	cpi	r20,@3
                                 	brne	no
                                 	SEZ							;set zero flag
                                 	rjmp	end
                                 no:
                                 	CLZ							;clear zero flag
                                 end:
                                 	nop
                                 .include	"keypad.inc"
                                 
                                 ;............................keypad.......................................................
                                 clear:						;re-inialize Y pointer
                                 	ldi	YL,LOW(id)
                                 	ldi	YH,HIGH(id)
                                 	ldi	r18,0
                                 	st	Y,r18
                                 	ldi	r19,0				;clearing register (incrementer)
                                 startk:			
                                 	ldi r16,0x01			;HIGH row 1
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next1
                                 	rcall	hold
                                 	ldi	r18,1
                                 	adiw	Y,1
                                 	st	Y,r18	
                                 	inc	r19
                                 next1:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next2
                                 	rcall	hold
                                 	ldi	r18,2
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next2:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next3
                                 	rcall	hold
                                 	ldi	r18,3
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next3:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next4
                                 	rcall	hold
                                 	ldi	r18,'A'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next4:
                                 	ldi r16,0x02				;;HIGH row 2
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next5
                                 	rcall	hold
                                 	ldi	r18,4
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next5:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next6
                                 	rcall	hold
                                 	ldi	r18,5
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next6:		
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next7
                                 	rcall	hold
                                 	ldi	r18,6
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next7:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next8
                                 	rcall	hold
                                 	ldi	r18,'B'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next8:
                                 	ldi r16,0x04			;HIGH row 3
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next9
                                 	rcall	hold
                                 	ldi	r18,7
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next9:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next10
                                 	rcall	hold
                                 	ldi	r18,8
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next10:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next11
                                 	rcall	hold
                                 	ldi	r18,9
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next11:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next12
                                 	rcall	hold
                                 	rjmp	a
                                 next12:
                                 	ldi r16,0x08				;HIGH row 4
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next13
                                 	rcall	hold
                                 	ldi	r18,'*'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next13:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next14
                                 	rcall	hold
                                 	ldi	r18,0
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next14:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next15
                                 	rcall	hold
                                 	rjmp	check
                                 next15:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	khatar
                                 	rcall	hold
                                 	ldi	r18,'D'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 khatar:
                                 	sbis	PINC,1
                                 	rjmp	exit
                                 
                                 	sbis UCSRA, RXC
                                 	rjmp  startk
                                 	in	r17,UDR
                                 	cpi	r17,'B'
                                 	breq	e
                                 
                                 rjmp  startk
                                 
                                 e:	
                                 	ldi	r17,1
                                 	rjmp	exit
                                 
                                 hold:
                                 	sbi	PORTA,1
                                 
                                 	in	r16,PINB
                                 	sbrc	r16,4
                                 	rjmp hold
                                 	sbrc	r16,5
                                 	rjmp hold
                                 	sbrc	r16,6
                                 	rjmp hold
                                 	sbrc	r16,7
                                 	rjmp hold
                                 
                                 	cbi	PORTA,1
                                 	ret
                                 
                                 check:
                                 	cpi	r19,4				;r19 --> incrementer
                                 	brne	a				;mdkhlsh 4 arkam .........
                                 	rjmp	set_id	
                                 a:
                                 	delay	1500
                                 	sbi	PORTA,1				;HIGH buzz
                                 	delay	500
                                 	cbi	PORTA,1				;LOW buzz
                                 	delay	500
                                 	sbi	PORTA,1
                                 	delay	500
                                 	cbi	PORTA,1
                                 	delay	500
                                 	rjmp	clear
                                 
                                 set_id:
                                 	nop
                                 	adiw	Y,1
                                 	nop
                                 	ld	r20,-Y
                                 	ld	r21,-Y
                                 	ld	r22,-Y
                                 	ld	r23,-Y
                                 	nop
                                 exit:
                                 .endmacro
                                 .include	"initUART.inc"
                                 
                                 
                                 ldi	r16,12		; load baud rate  [(F_CPU/(BouadRate*8))-1]  (boudrate = 9600) (elvalue de mawgoda f eldatasheet)
                                 ldi	r17,0
                                 
                                 out UBRRH, r17							;UART baud rate register
                                 out UBRRL, r16
                                 
                                 ;	double speed mode
                                 sbi	UCSRA,U2X							;UART control statue register A
                                 
                                 ; Enable receiver and transmitter
                                 ldi r16, (1<<RXEN)|(1<<TXEN)
                                 out UCSRB,r16							;UART control statue register B
                                 
                                 ; Set frame format: 8data bit , 2stop bit
                                 ldi r16, (1<<URSEL)|(1<<USBS)|(3<<UCSZ0)
                                 out UCSRC,r16							;UART control statue register C
                                 
                                 .endmacro
                                 .include	"send_string.inc"
                                 
                                 
                                 ldi	ZL,LOW(2*@0)			; load Z pointer with
                                 ldi	ZH,HIGH(2*@0)
                                 
                                 
                                 puts:	lpm	r16,Z+				; load character from pmem
                                 	cpi	r16,0x00				; check if null
                                 	breq	puts_end
                                 
                                 	puts_wait:
                                 	sbis UCSRA,UDRE			; wait for empty transmit buffer
                                 	rjmp	puts_wait
                                 
                                 	out	UDR,r16			; transmit character
                                 	rjmp	puts
                                 
                                 	puts_end:
                                 	nop
                                 .include	"receive_char.inc"
                                 
                                 
                                 	wait:
                                 ; Wait for data to be received
                                 sbis UCSRA, RXC
                                 rjmp wait
                                 
                                 ; Get and return received data from buffer
                                 in @0, UDR
                                 
                                 ;................................................................................................
                                 .dseg
                                 .org	SRAM_START
                                 
000060                           id:	.byte	20
                                 ;................................................................................................
                                 .cseg
                                 .org	0x00
                                 
000000 e50f
000001 bf0d
000002 e008
000003 bf0e                      	init_stack			;initialize stack by calling its macro
000004 e00c
000005 e010
000006 bd10
000007 b909
000008 9a59
000009 e108
00000a b90a
00000b e80e
00000c bd00                      	init_UART			;initialize	UART (bleutooth)
                                 ;................................................................................................
                                 ;declaring i/o pins ....................................................
00000d ef0f                      	ldi r16,0xff		;make PORT A pin all output 
00000e bb0a                      	out DDRA,r16		
                                 	;pin0	=	relay
                                 	;pin1	=	buzz
                                 	;pin2	=	led green
                                 	;pin3	=	led blue
                                 	;pin4	=	led red
                                 
00000f e000                      	ldi	r16,0			;make PORT C pin all input
000010 bb04                      	out	DDRC,r16
                                 	;pin0	=	sensor_open
                                 	;pin1	=	sensor_alarm
                                 ;................................................................................................
                                 ;............................keypad.......................................................
000011 e00f                      	ldi r16,0x0f			;first 4pins (ROWS) input ... last 4pins (COLS) output
000012 bb07                      	out DDRB,r16
                                 ;................................................................................................
000013 e010                      ldi	r17,0
                                 start:
                                 	
000014 e020                      	ldi	r18,0
                                 
000015 e000                      	ldi	r16,0			;all pins LOW
000016 bb0b                      	out PORTA,r16
                                 ;wait untill bleutooth connected...............................................		
                                 	connect:
000017 9adc                      		sbi		PORTA,4				;HIGH Red Led
000018 fd10                      		sbrc	r17,0
000019 c002                      		rjmp	p
00001a 9b99                      		sbis	PINC,1
00001b c37c                      		rjmp	khataar				;khatar................
                                 
                                 		p:
00001c 934f
00001d 938f
00001e 939f
00001f e04a
000020 ec83
000021 e099
000022 9701
000023 f7f1
000024 954a
000025 f7d1
000026 919f
000027 918f
000028 914f                      		delay	100
000029 9b5f                      		sbis UCSRA, RXC
00002a cfec                      		rjmp	connect
00002b b12c                      		in	r18,UDR
00002c 3421                      		cpi	r18,'A'
00002d f009                      		breq	s
00002e cfe8                      		rjmp	connect
                                 s:
00002f e010                      	ldi	r17,0
000030 934f
000031 938f
000032 939f
000033 e644
000034 ec83
000035 e099
000036 9701
000037 f7f1
000038 954a
000039 f7d1
00003a 919f
00003b 918f
00003c 914f                      	delay	1000
                                 ;................................................................................................
00003d e9ee
00003e e0f8
00003f 9105
000040 3000
000041 f021
000042 9b5d
000043 cffe
000044 b90c
000045 cff9
000046 0000                      	write	welcome				;write elkhazna gahza llsho3'l
000047 9adc                      	sbi		PORTA,4				;HIGH Red Led
000048 9adb                      	sbi		PORTA,3 			;HIGH blue Led
000049 9ada                      	sbi		PORTA,2				;HIGH green Led
00004a 934f
00004b 938f
00004c 939f
00004d e04a
00004e ec83
00004f e099
000050 9701
000051 f7f1
000052 954a
000053 f7d1
000054 919f
000055 918f
000056 914f                      	delay	100
                                 ;................................................................................................
                                 ;............................keypad.......................................................
000057 e010                      	ldi	r17,0
000058 e6c0
000059 e0d0
00005a e020
00005b 8328
00005c e030
00005d e001
00005e bb08
00005f 0000
000060 9bb4
000061 c005
000062 d07a
000063 e021
000064 9621
000065 8328
000066 9533
000067 9bb5
000068 c005
000069 d073
00006a e022
00006b 9621
00006c 8328
00006d 9533
00006e 9bb6
00006f c005
000070 d06c
000071 e023
000072 9621
000073 8328
000074 9533
000075 9bb7
000076 c005
000077 d065
000078 e421
000079 9621
00007a 8328
00007b 9533
00007c e002
00007d bb08
00007e 0000
00007f 9bb4
000080 c005
000081 d05b
000082 e024
000083 9621
000084 8328
000085 9533
000086 9bb5
000087 c005
000088 d054
000089 e025
00008a 9621
00008b 8328
00008c 9533
00008d 9bb6
00008e c005
00008f d04d
000090 e026
000091 9621
000092 8328
000093 9533
000094 9bb7
000095 c005
000096 d046
000097 e422
000098 9621
000099 8328
00009a 9533
00009b e004
00009c bb08
00009d 0000
00009e 9bb4
00009f c005
0000a0 d03c
0000a1 e027
0000a2 9621
0000a3 8328
0000a4 9533
0000a5 9bb5
0000a6 c005
0000a7 d035
0000a8 e028
0000a9 9621
0000aa 8328
0000ab 9533
0000ac 9bb6
0000ad c005
0000ae d02e
0000af e029
0000b0 9621
0000b1 8328
0000b2 9533
0000b3 9bb7
0000b4 c002
0000b5 d027
0000b6 c035
0000b7 e008
0000b8 bb08
0000b9 0000
0000ba 9bb4
0000bb c005
0000bc d020
0000bd e22a
0000be 9621
0000bf 8328
0000c0 9533
0000c1 9bb5
0000c2 c005
0000c3 d019
0000c4 e020
0000c5 9621
0000c6 8328
0000c7 9533
0000c8 9bb6
0000c9 c002
0000ca d012
0000cb c01d
0000cc 9bb7
0000cd c005
0000ce d00e
0000cf e424
0000d0 9621
0000d1 8328
0000d2 9533
0000d3 9b99
0000d4 c065
0000d5 9b5f
0000d6 cf86
0000d7 b11c
0000d8 3412
0000d9 f009
0000da cf82
0000db e011
0000dc c05d
0000dd 9ad9
0000de b306
0000df fd04
0000e0 cffc
0000e1 fd05
0000e2 cffa
0000e3 fd06
0000e4 cff8
0000e5 fd07
0000e6 cff6
0000e7 98d9
0000e8 9508
0000e9 3034
0000ea f409
0000eb c046
0000ec 934f
0000ed 938f
0000ee 939f
0000ef e946
0000f0 ec83
0000f1 e099
0000f2 9701
0000f3 f7f1
0000f4 954a
0000f5 f7d1
0000f6 919f
0000f7 918f
0000f8 914f
0000f9 9ad9
0000fa 934f
0000fb 938f
0000fc 939f
0000fd e342
0000fe ec83
0000ff e099
000100 9701
000101 f7f1
000102 954a
000103 f7d1
000104 919f
000105 918f
000106 914f
000107 98d9
000108 934f
000109 938f
00010a 939f
00010b e342
00010c ec83
00010d e099
00010e 9701
00010f f7f1
000110 954a
000111 f7d1
000112 919f
000113 918f
000114 914f
000115 9ad9
000116 934f
000117 938f
000118 939f
000119 e342
00011a ec83
00011b e099
00011c 9701
00011d f7f1
00011e 954a
00011f f7d1
000120 919f
000121 918f
000122 914f
000123 98d9
000124 934f
000125 938f
000126 939f
000127 e342
000128 ec83
000129 e099
00012a 9701
00012b f7f1
00012c 954a
00012d f7d1
00012e 919f
00012f 918f
000130 914f
000131 cf26
000132 0000
000133 9621
000134 0000
000135 914a
000136 915a
000137 916a
000138 917a
000139 0000                      	read_id						;start reading id
                                 ;...............................................................................
00013a fd10                      	sbrc	r17,0
00013b c2be                      	rjmp	stop
                                 
                                 ;........check if khatar .......................................................
00013c 9b99                      	sbis	PINC,1
00013d c25a                      	rjmp	khataar				;khatar................
                                 ;...............................................................................
                                 ;........no khatar .......................................................
00013e 0000                      	nop							;no operation	(used for syncronyzation)
00013f 934f
000140 938f
000141 939f
000142 ec48
000143 ec83
000144 e099
000145 9701
000146 f7f1
000147 954a
000148 f7d1
000149 919f
00014a 918f
00014b 914f                      	delay	2000
00014c 9ad9                      	sbi	PORTA,1					;blink buzzer   (teet teet)
00014d 934f
00014e 938f
00014f 939f
000150 e04f
000151 ec83
000152 e099
000153 9701
000154 f7f1
000155 954a
000156 f7d1
000157 919f
000158 918f
000159 914f                      	delay	150
00015a 98d9                      	cbi	PORTA,1
00015b 934f
00015c 938f
00015d 939f
00015e e04f
00015f ec83
000160 e099
000161 9701
000162 f7f1
000163 954a
000164 f7d1
000165 919f
000166 918f
000167 914f                      	delay	150
000168 9ad9                      	sbi	PORTA,1
000169 934f
00016a 938f
00016b 939f
00016c e04f
00016d ec83
00016e e099
00016f 9701
000170 f7f1
000171 954a
000172 f7d1
000173 919f
000174 918f
000175 914f                      	delay	150
000176 98d9                      	cbi	PORTA,1
000177 934f
000178 938f
000179 939f
00017a e04f
00017b ec83
00017c e099
00017d 9701
00017e f7f1
00017f 954a
000180 f7d1
000181 919f
000182 918f
000183 914f                      	delay	150
                                 ;...............................................................................
                                 ;........ckecking id .......................................................
000184 3071
000185 f441
000186 3062
000187 f431
000188 3053
000189 f421
00018a 3044
00018b f411
00018c 9418
00018d c001
00018e 9498
00018f 0000                      	is	1,2,3,4					;check if it is the id of "ahmed" 
000190 f129                      	breq	is_ahmed			;true, write ahmed
000191 3075
000192 f441
000193 3066
000194 f431
000195 3057
000196 f421
000197 3048
000198 f411
000199 9418
00019a c001
00019b 9498
00019c 0000                      	is	5,6,7,8					;false, check if it is the id of "gemy" and so on ......
00019d f119                      	breq	is_gemy	
00019e 3071
00019f f441
0001a0 3064
0001a1 f431
0001a2 3057
0001a3 f421
0001a4 3048
0001a5 f411
0001a6 9418
0001a7 c001
0001a8 9498
0001a9 0000                      	is	1,4,7,8
0001aa f109                      	breq	is_sara
                                 
0001ab e3e8
0001ac e0f8
0001ad 9105
0001ae 3000
0001af f021
0001b0 9b5d
0001b1 cffe
0001b2 b90c
0001b3 cff9
0001b4 0000                      	write	unknown				;if it is not known id  
0001b5 c021                      	rjmp	try					;write is trying to open ..........
                                 is_ahmed:
0001b6 e4e8
0001b7 e0f8
0001b8 9105
0001b9 3000
0001ba f021
0001bb 9b5d
0001bc cffe
0001bd b90c
0001be cff9
0001bf 0000                      	write	ahmed
0001c0 c016                      	rjmp	try
                                 is_gemy:
0001c1 e5e0
0001c2 e0f8
0001c3 9105
0001c4 3000
0001c5 f021
0001c6 9b5d
0001c7 cffe
0001c8 b90c
0001c9 cff9
0001ca 0000                      	write	gemy
0001cb c00b                      	rjmp	try
                                 is_sara:
0001cc e5e6
0001cd e0f8
0001ce 9105
0001cf 3000
0001d0 f021
0001d1 9b5d
0001d2 cffe
0001d3 b90c
0001d4 cff9
0001d5 0000                      	write	sara
0001d6 c000                      	rjmp	try
                                 try:
0001d7 e6ea
0001d8 e0f8
0001d9 9105
0001da 3000
0001db f021
0001dc 9b5d
0001dd cffe
0001de b90c
0001df cff9
0001e0 0000                      	write trying
                                 ;..................................................................................
                                 ;........wait for response from owner .......................................................
0001e1 e008                      	ldi	r16,8					;HIGH blue led
0001e2 bb0b                      	out PORTA,r16		
                                 
0001e3 9b5f
0001e4 cffe
0001e5 b10c                      	read	r16					;read bleutooth (wait untill user tell me what shoud i do)
                                 ;..................................................................................
                                 ;........take order  .......................................................
0001e6 3301                      	cpi	r16,'1'					;'1' means allow
0001e7 f409                      	brne	a
0001e8 c0a4                      	rjmp	allow	
                                 a:				
0001e9 3302                      	cpi	r16,'2'					;'2' means reject
0001ea f409                      	brne	b
0001eb c001                      	rjmp	reject
                                 b:
0001ec c050                      	rjmp	alarm				;otherwise	 alarm 
                                 ;..................................................................................	
                                 reject:
                                 ;blink buzz & red led...............
0001ed 934f
0001ee 938f
0001ef 939f
0001f0 e342
0001f1 ec83
0001f2 e099
0001f3 9701
0001f4 f7f1
0001f5 954a
0001f6 f7d1
0001f7 919f
0001f8 918f
0001f9 914f                      	delay	500
0001fa e013                      	ldi	r17,3					;loop 3 times
                                 	loopr:
0001fb e102                      	ldi	r16,0b00010010			;HIGH
0001fc bb0b                      	out PORTA,r16
0001fd 934f
0001fe 938f
0001ff 939f
000200 e34c
000201 ec83
000202 e099
000203 9701
000204 f7f1
000205 954a
000206 f7d1
000207 919f
000208 918f
000209 914f                      	delay	600
00020a e000                      	ldi	r16,0					;LOW
00020b bb0b                      	out PORTA,r16
00020c 934f
00020d 938f
00020e 939f
00020f e34c
000210 ec83
000211 e099
000212 9701
000213 f7f1
000214 954a
000215 f7d1
000216 919f
000217 918f
000218 914f                      	delay	600
000219 951a                      	dec	r17
00021a f701                      	brne	loopr
00021b 934f
00021c 938f
00021d 939f
00021e ef4a
00021f ec83
000220 e099
000221 9701
000222 f7f1
000223 954a
000224 f7d1
000225 919f
000226 918f
000227 914f                      	delay	2500
000228 e5e0
000229 e0f9
00022a 9105
00022b 3000
00022c f021
00022d 9b5d
00022e cffe
00022f b90c
000230 cff9
000231 0000                      	write	rejected
000232 e7e6
000233 e0f9
000234 9105
000235 3000
000236 f021
000237 9b5d
000238 cffe
000239 b90c
00023a cff9
00023b 0000                      	write	would
00023c cdd7                      	rjmp	start						;return to start
                                 ;..................................................................................
                                 alarm:
                                 ;blink buzz & red led (quickly)...............
00023d 934f
00023e 938f
00023f 939f
000240 e342
000241 ec83
000242 e099
000243 9701
000244 f7f1
000245 954a
000246 f7d1
000247 919f
000248 918f
000249 914f                      	delay	500
00024a e01c                      	ldi	r17,12					;loop 8 times
                                 	loopa:
00024b e102                      	ldi	r16,0b00010010			;HIGH
00024c bb0b                      	out PORTA,r16
00024d 934f
00024e 938f
00024f 939f
000250 e04f
000251 ec83
000252 e099
000253 9701
000254 f7f1
000255 954a
000256 f7d1
000257 919f
000258 918f
000259 914f                      	delay	150
00025a e000                      	ldi	r16,0					;LOW
00025b bb0b                      	out PORTA,r16
00025c 934f
00025d 938f
00025e 939f
00025f e04f
000260 ec83
000261 e099
000262 9701
000263 f7f1
000264 954a
000265 f7d1
000266 919f
000267 918f
000268 914f                      	delay	150
000269 951a                      	dec	r17
00026a f701                      	brne	loopa
00026b 934f
00026c 938f
00026d 939f
00026e ef4a
00026f ec83
000270 e099
000271 9701
000272 f7f1
000273 954a
000274 f7d1
000275 919f
000276 918f
000277 914f                      	delay	2500
000278 e3ee
000279 e0f9
00027a 9105
00027b 3000
00027c f021
00027d 9b5d
00027e cffe
00027f b90c
000280 cff9
000281 0000                      	write	alarmed
000282 e7e6
000283 e0f9
000284 9105
000285 3000
000286 f021
000287 9b5d
000288 cffe
000289 b90c
00028a cff9
00028b 0000                      	write	would
00028c cd87                      	rjmp	start						;return to start
                                 ;..................................................................................
                                 allow:
00028d 934f
00028e 938f
00028f 939f
000290 e342
000291 ec83
000292 e099
000293 9701
000294 f7f1
000295 954a
000296 f7d1
000297 919f
000298 918f
000299 914f                      	delay	500
00029a eee8
00029b e0f8
00029c 9105
00029d 3000
00029e f021
00029f 9b5d
0002a0 cffe
0002a1 b90c
0002a2 cff9
0002a3 0000                      	write	pass						;request the owner password
0002a4 934f
0002a5 938f
0002a6 939f
0002a7 e04a
0002a8 ec83
0002a9 e099
0002aa 9701
0002ab f7f1
0002ac 954a
0002ad f7d1
0002ae 919f
0002af 918f
0002b0 914f                      	delay	100
                                 
0002b1 9b5f
0002b2 cffe
0002b3 b10c                      	read	r16							;read the first character of the password
0002b4 9b5f
0002b5 cffe
0002b6 b11c                      	read	r17							;read the second character of the password
0002b7 9b5f
0002b8 cffe
0002b9 b12c                      	read	r18							;read the third character of the password
0002ba 9b5f
0002bb cffe
0002bc b13c                      	read	r19							;read the fourth character of the password
                                 ;the password is "0000"...................................................................................
0002bd 3300                      	cpi	r16,'0'							;alarm if any digit of entered password	is mistake
0002be f439                      	brne	c							
0002bf 3310                      	cpi	r17,'0'
0002c0 f429                      	brne	c							
0002c1 3320                      	cpi	r18,'0'
0002c2 f419                      	brne	c
0002c3 3330                      	cpi	r19,'0'
0002c4 f409                      	brne	c
                                 		
0002c5 c050                      	rjmp	correct
                                 c:	
0002c6 934f
0002c7 938f
0002c8 939f
0002c9 e644
0002ca ec83
0002cb e099
0002cc 9701
0002cd f7f1
0002ce 954a
0002cf f7d1
0002d0 919f
0002d1 918f
0002d2 914f                      	delay	1000
0002d3 e2e8
0002d4 e0f9
0002d5 9105
0002d6 3000
0002d7 f021
0002d8 9b5d
0002d9 cffe
0002da b90c
0002db cff9
0002dc 0000                      	write	wrong
0002dd e01c                      	ldi	r17,12					;loop 8 times
                                 	loopc:
0002de e102                      	ldi	r16,0b00010010			;HIGH
0002df bb0b                      	out PORTA,r16
0002e0 934f
0002e1 938f
0002e2 939f
0002e3 e04f
0002e4 ec83
0002e5 e099
0002e6 9701
0002e7 f7f1
0002e8 954a
0002e9 f7d1
0002ea 919f
0002eb 918f
0002ec 914f                      	delay	150
0002ed e000                      	ldi	r16,0					;LOW
0002ee bb0b                      	out PORTA,r16
0002ef 934f
0002f0 938f
0002f1 939f
0002f2 e04f
0002f3 ec83
0002f4 e099
0002f5 9701
0002f6 f7f1
0002f7 954a
0002f8 f7d1
0002f9 919f
0002fa 918f
0002fb 914f                      	delay	150
0002fc 951a                      	dec	r17
0002fd f701                      	brne	loopc
                                 
0002fe 934f
0002ff 938f
000300 939f
000301 e644
000302 ec83
000303 e099
000304 9701
000305 f7f1
000306 954a
000307 f7d1
000308 919f
000309 918f
00030a 914f                      	delay	1000
00030b e7e6
00030c e0f9
00030d 9105
00030e 3000
00030f f021
000310 9b5d
000311 cffe
000312 b90c
000313 cff9
000314 0000                      	write	would
000315 ccfe                      	rjmp	start
                                 
                                 correct:		
                                 ;correct password.............................................................
000316 934f
000317 938f
000318 939f
000319 e342
00031a ec83
00031b e099
00031c 9701
00031d f7f1
00031e 954a
00031f f7d1
000320 919f
000321 918f
000322 914f                      	delay	500
000323 e006                      	ldi	r16,0b00000110					;HIGH buzz & green led
000324 bb0b                      	out PORTA,r16
000325 934f
000326 938f
000327 939f
000328 e540
000329 ec83
00032a e099
00032b 9701
00032c f7f1
00032d 954a
00032e f7d1
00032f 919f
000330 918f
000331 914f                      	delay	800
000332 98d9                      	cbi	PORTA,1							;LOW buzz only
000333 934f
000334 938f
000335 939f
000336 ec48
000337 ec83
000338 e099
000339 9701
00033a f7f1
00033b 954a
00033c f7d1
00033d 919f
00033e 918f
00033f 914f                      	delay	2000
000340 9ad8                      	sbi	PORTA,0							;HIGH relay		(open the khazna)
000341 934f
000342 938f
000343 939f
000344 e342
000345 ec83
000346 e099
000347 9701
000348 f7f1
000349 954a
00034a f7d1
00034b 919f
00034c 918f
00034d 914f                      	delay	500							;for 0.5 second
00034e 98d8                      	cbi	PORTA,0							;LOW relay
                                 
00034f 934f
000350 938f
000351 939f
000352 e644
000353 ec83
000354 e099
000355 9701
000356 f7f1
000357 954a
000358 f7d1
000359 919f
00035a 918f
00035b 914f                      	delay	1000
00035c e0e2
00035d e0f9
00035e 9105
00035f 3000
000360 f021
000361 9b5d
000362 cffe
000363 b90c
000364 cff9
000365 0000                      	write	open						;tell the owner that khazna is opened
                                 
                                 	lock:									
000366 9b98                      	sbis	PINC,0						;wait untill khazna be closed
000367 cffe                      	rjmp	lock
                                 
000368 934f
000369 938f
00036a 939f
00036b e04a
00036c ec83
00036d e099
00036e 9701
00036f f7f1
000370 954a
000371 f7d1
000372 919f
000373 918f
000374 914f                      	delay	100
000375 e1e6
000376 e0f9
000377 9105
000378 3000
000379 f021
00037a 9b5d
00037b cffe
00037c b90c
00037d cff9
00037e 0000                      	write	close						;tell the owner that khazna is closed
                                 
00037f 98da                      	cbi	PORTA,2							;LOW green led
000380 934f
000381 938f
000382 939f
000383 ef4a
000384 ec83
000385 e099
000386 9701
000387 f7f1
000388 954a
000389 f7d1
00038a 919f
00038b 918f
00038c 914f                      	delay	2500
00038d e7e6
00038e e0f9
00038f 9105
000390 3000
000391 f021
000392 9b5d
000393 cffe
000394 b90c
000395 cff9
000396 0000                      	write	would
000397 cc7c                      	rjmp	start
                                 ;..................................................................................
                                 khataar:
000398 e020                      	ldi	r18,0
                                 
000399 ebee
00039a e0f8
00039b 9105
00039c 3000
00039d f021
00039e 9b5d
00039f cffe
0003a0 b90c
0003a1 cff9
0003a2 0000                      	write	khatar
                                 
0003a3 e114                      	ldi	r17,20
                                 	loopk:
0003a4 e10e                      	ldi	r16,0b00011110			;HIGH	all (buzz,green,red,blue)
0003a5 bb0b                      	out PORTA,r16
0003a6 934f
0003a7 938f
0003a8 939f
0003a9 e04f
0003aa ec83
0003ab e099
0003ac 9701
0003ad f7f1
0003ae 954a
0003af f7d1
0003b0 919f
0003b1 918f
0003b2 914f                      	delay	150
0003b3 e000                      	ldi	r16,0					;LOW	all (buzz,green,red,blue)
0003b4 bb0b                      	out PORTA,r16
0003b5 934f
0003b6 938f
0003b7 939f
0003b8 e04f
0003b9 ec83
0003ba e099
0003bb 9701
0003bc f7f1
0003bd 954a
0003be f7d1
0003bf 919f
0003c0 918f
0003c1 914f                      	delay	150
0003c2 951a                      	dec	r17
0003c3 f701                      	brne	loopk	
0003c4 934f
0003c5 938f
0003c6 939f
0003c7 e04a
0003c8 ec83
0003c9 e099
0003ca 9701
0003cb f7f1
0003cc 954a
0003cd f7d1
0003ce 919f
0003cf 918f
0003d0 914f                      	delay	100
0003d1 9b5f                      	sbis UCSRA, RXC
0003d2 cfc5                      	rjmp	khataar
0003d3 b12c                      	in	r18,UDR
0003d4 3422                      	cpi	r18,'B'
0003d5 f009                      	breq	d
0003d6 cfc1                      	rjmp	khataar
                                 d:
0003d7 e011                      	ldi	r17,1
0003d8 934f
0003d9 938f
0003da 939f
0003db e946
0003dc ec83
0003dd e099
0003de 9701
0003df f7f1
0003e0 954a
0003e1 f7d1
0003e2 919f
0003e3 918f
0003e4 914f                      	delay	1500
0003e5 e6e4
0003e6 e0f9
0003e7 9105
0003e8 3000
0003e9 f021
0003ea 9b5d
0003eb cffe
0003ec b90c
0003ed cff9
0003ee 0000                      	write	stoped
0003ef e7e6
0003f0 e0f9
0003f1 9105
0003f2 3000
0003f3 f021
0003f4 9b5d
0003f5 cffe
0003f6 b90c
0003f7 cff9
0003f8 0000                      	write	would
                                 	;delay	2500
0003f9 cc1a                      	rjmp	start	
                                 
                                 stop:
0003fa 934f
0003fb 938f
0003fc 939f
0003fd e342
0003fe ec83
0003ff e099
000400 9701
000401 f7f1
000402 954a
000403 f7d1
000404 919f
000405 918f
000406 914f                      	delay	500
000407 e6e4
000408 e0f9
000409 9105
00040a 3000
00040b f021
00040c 9b5d
00040d cffe
00040e b90c
00040f cff9
000410 0000                      	write	stoped
000411 e7e6
000412 e0f9
000413 9105
000414 3000
000415 f021
000416 9b5d
000417 cffe
000418 b90c
000419 cff9
00041a 0000                      	write	would
00041b cbf8                      	rjmp	start
                                 ;............................................................................................................................
                                 ;	declaring all strings ................................................................
                                 	;(\n = 0x0a)
00041c 550a
00041d 6b6e
00041e 6f6e
00041f 6e77
000420 7020
000421 7265
000422 6f73
000423 006e                      	unknown:	.db		0x0a,"Unknown person",0x00				;writing in program memory
000424 410a
000425 6d68
000426 6465
000427 0020                      	ahmed:		.db		0x0a,"Ahmed ",0x00
000428 470a
000429 6d65
00042a 0079                      	gemy:		.db		0x0a,"Gemy",0x00
00042b 530a
00042c 7261
00042d 0061                      	sara:		.db		0x0a,"Sara",0x00
00042e 440a
00042f 336f
000430 3261
000431 0020                      	do3aa:		.db		0x0a,"Do3a2 ",0x00
000432 410a
000433 6179
000434 0020                      	aya:		.db		0x0a,"Aya ",0x00
000435 6920
000436 2073
000437 7274
000438 6979
000439 676e
00043a 7420
00043b 206f
00043c 706f
00043d 6e65
00043e 7420
00043f 6568
000440 6b20
000441 6168
000442 6e7a
000443 0a61
000444 770a
000445 6168
000446 2074
000447 6873
000448 756f
000449 646c
00044a 6920
00044b 6420
00044c 3f6f
00044d 0a21
00044e 000a                      	trying:		.db		" is trying to open the khazna",0x0a,0x0a,"what should i do?!",0x0a,0x0a,0x00
                                 
00044f 650a
000450 6b6c
000451 6168
000452 6e7a
000453 2061
000454 6167
000455 7a68
000456 2061
000457 6c6c
000458 6873
000459 336f
00045a 6c27
00045b 2e2e
00045c 2e2e
00045d 212e
00045e 000a                      	welcome:	.db		0x0a,"elkhazna gahza llsho3'l.....!",0x0a,0x00
00045f 650a
000460 6b6c
000461 6168
000462 6e7a
000463 2061
000464 2066
000465 6135
000466 7474
000467 6161
000468 6161
000469 6161
00046a 6161
00046b 6161
00046c 6161
00046d 6161
00046e 2e72
00046f 2e2e
000470 212e
000471 2121
000472 2121
000473 000a                      	khatar:		.db		0x0a,"elkhazna f 5attaaaaaaaaaaaaaar....!!!!!",0x0a,0x00
000474 650a
000475 746e
000476 7265
000477 7420
000478 6568
000479 7020
00047a 7361
00047b 7773
00047c 726f
00047d 2e64
00047e 2e2e
00047f 212e
000480 000a                      	pass:		.db		0x0a,"enter the password....!",0x0a,0x00
000481 650a
000482 6b6c
000483 6168
000484 6e7a
000485 2061
000486 7465
000487 6166
000488 3774
000489 2065
00048a 000a                      	open:		.db		0x0a,"elkhazna etfat7e ",0x0a,0x00
00048b 650a
00048c 6b6c
00048d 6168
00048e 6e7a
00048f 2061
000490 7465
000491 6632
000492 746c
000493 000a                      	close:		.db		0x0a,"elkhazna et2flt",0x0a,0x00
                                 
000494 570a
000495 6f72
000496 676e
000497 7020
000498 7361
000499 7773
00049a 726f
00049b 2e64
00049c 212e
00049d 2121
00049e 000a                      	wrong:		.db		0x0a,"Wrong password..!!!",0x0a,0x00
00049f 440a
0004a0 6e6f
0004a1 2065
0004a2 6c61
0004a3 7261
0004a4 656d
0004a5 2e64
0004a6 212e
0004a7 000a                      	alarmed:	.db		0x0a,"Done alarmed..!",0x0a,0x00
0004a8 440a
0004a9 6e6f
0004aa 2065
0004ab 6572
0004ac 656a
0004ad 7463
0004ae 6465
0004af 2e2e
0004b0 2021
0004b1 000a                      	rejected:	.db		0x0a,"Done rejected..! ",0x0a,0x00	
0004b2 440a
0004b3 6e6f
0004b4 2065
0004b5 7473
0004b6 706f
0004b7 6465
0004b8 2e2e
0004b9 2021
0004ba 000a                      	stoped:		.db		0x0a,"Done stoped..! ",0x0a,0x00
0004bb 570a
0004bc 756f
0004bd 646c
0004be 7920
0004bf 756f
0004c0 6c20
0004c1 6b69
0004c2 2065
0004c3 6f74
0004c4 7320
0004c5 6174
0004c6 7472
0004c7 6120
0004c8 6167
0004c9 6e69
0004ca 3f20
0004cb 2e2e
0004cc 700a
0004cd 6572
0004ce 7373
0004cf 7320
0004d0 6174
0004d1 7472
0004d2 2e2e
0004d3 2e2e
0004d4 212e
0004d5 000a                      	would:		.db		0x0a,"Would you like to start again ?..",0x0a,"press start.....!",0x0a,0x00
                                 ;................................................................................................................................	
                                 ;............................................................................................................................


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   0 y  :  34 z  :  21 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 119 r17:  21 r18:  38 r19:  18 r20: 160 
r21:   4 r22:   4 r23:   4 r24: 156 r25: 117 r26:   0 r27:   0 r28:   1 
r29:   1 r30:  21 r31:  21 
Registers used: 16 out of 35 (45.7%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :  15 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  27 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  : 101 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   8 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   3 com   :   0 cp    :   0 cpc   :   0 
cpi   :  43 cpse  :   0 dec   :  43 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   9 inc   :  14 jmp   :   0 
ld    :   4 ldd   :   0 ldi   : 212 lds   :   0 lpm   :  21 lsl   :   0 
lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  32 or    :   0 ori   :   0 out   :  45 pop   : 117 
push  : 117 rcall :  16 ret   :   1 reti  :   0 rjmp  : 101 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  11 sbic  :   0 sbis  :  49 
sbiw  :  39 sbr   :   0 sbrc  :   6 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   3 sleep :   0 spm   :   0 st    :  15 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 25 out of 113 (22.1%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009ac   2104    372   2476   32768   7.6%
[.dseg] 0x000060 0x000074      0     20     20    2048   1.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
