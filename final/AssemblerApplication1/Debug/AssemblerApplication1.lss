
AVRASM ver. 2.2.8  D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm Fri Jan 07 01:47:06 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(3): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\delay_function.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(4): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\set stack.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(5): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\compare.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(6): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\keypad.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(7): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\initUART.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(8): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\send_string.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(9): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\receive_char.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(3): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\delay_function.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(4): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\set stack.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(5): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\compare.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(6): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\keypad.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(7): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\initUART.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(8): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\send_string.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(9): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\receive_char.inc'
                                 
                                 ;	including all libraries................................................
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 .include	"m32def.inc"			;atmega32	library
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 .include	"delay_function.inc"
                                 
                                 ;push the 3 registers that we will use  
                                 push r20 
                                 push r24
                                 push r25
                                 
                                 
                                 ldi r20,@0/10		; the delay time entered by the user 
                                 
                                 outerloop:										; outer loop
                                 			ldi		r24,LOW(2499)					; initialize itirators at the begining each time
                                 			ldi		r25,HIGH(2499) 
                                 
                                 innerloop:
                                 			sbiw	r24,1
                                 			brne	innerloop					; loop (i) times
                                 
                                 			dec		r20 
                                 			brne	outerloop					; loop (r20) times
                                 
                                 ;pop the registers again
                                 pop r25
                                 pop r24
                                 pop r20
                                 .include	"set stack.inc"
                                 
                                 
                                 ldi		r16,LOW(RAMEND)  ;first address of stack segmant 
                                 out		SPL,r16
                                 ldi		r16,HIGH(RAMEND) 
                                 out		SPH,r16
                                 
                                 .include	"compare.inc"
                                 
                                 	cpi	r23,@0
                                 	brne	no
                                 	cpi	r22,@1
                                 	brne	no
                                 	cpi	r21,@2
                                 	brne	no
                                 	cpi	r20,@3
                                 	brne	no
                                 	SEZ
                                 	rjmp	end
                                 no:
                                 	CLZ
                                 end:
                                 	nop
                                 .include	"keypad.inc"
                                 
                                 ;............................keypad.......................................................
                                 clear:
                                 	ldi	YL,LOW(id)
                                 	ldi	YH,HIGH(id)
                                 	ldi	r18,0
                                 	st	Y,r18
                                 	ldi	r19,0
                                 startk:			
                                 	ldi r16,0x01			;HIGH row 1
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next1
                                 	rcall	hold
                                 	ldi	r18,1
                                 	adiw	Y,1
                                 	st	Y,r18	
                                 	inc	r19
                                 next1:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next2
                                 	rcall	hold
                                 	ldi	r18,2
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next2:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next3
                                 	rcall	hold
                                 	ldi	r18,3
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next3:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next4
                                 	rcall	hold
                                 	ldi	r18,'A'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next4:
                                 	ldi r16,0x02				;;HIGH row 2
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next5
                                 	rcall	hold
                                 	ldi	r18,4
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next5:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next6
                                 	rcall	hold
                                 	ldi	r18,5
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next6:		
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next7
                                 	rcall	hold
                                 	ldi	r18,6
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next7:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next8
                                 	rcall	hold
                                 	ldi	r18,'B'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next8:
                                 	ldi r16,0x04			;HIGH row 3
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next9
                                 	rcall	hold
                                 	ldi	r18,7
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next9:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next10
                                 	rcall	hold
                                 	ldi	r18,8
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next10:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next11
                                 	rcall	hold
                                 	ldi	r18,9
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next11:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next12
                                 	rcall	hold
                                 	rjmp	clear
                                 next12:
                                 	ldi r16,0x08				;HIGH row 4
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next13
                                 	rcall	hold
                                 	ldi	r18,'*'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next13:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next14
                                 	rcall	hold
                                 	ldi	r18,0
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next14:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next15
                                 	rcall	hold
                                 	rjmp	check
                                 next15:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	startk
                                 	rcall	hold
                                 	ldi	r18,'D'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 rjmp  startk
                                 
                                 hold:
                                 	ldi	r16,2
                                 	out	PORTC,r16
                                 	in	r16,PINB
                                 	sbrc	r16,4
                                 	rjmp hold
                                 	sbrc	r16,5
                                 	rjmp hold
                                 	sbrc	r16,6
                                 	rjmp hold
                                 	sbrc	r16,7
                                 	rjmp hold
                                 	ldi	r16,0
                                 	out	PORTC,r16
                                 	ret
                                 
                                 check:
                                 	cpi	r19,4
                                 	brne	a
                                 	rcall	set_id	
                                 a:
                                 delay	500
                                 ldi	r16,2
                                 out	PORTC,r16
                                 delay	500
                                 ldi	r16,0
                                 out	PORTC,r16
                                 delay	500
                                 ldi	r16,2
                                 out	PORTC,r16
                                 delay	500
                                 ldi	r16,0
                                 out	PORTC,r16
                                 delay	500
                                 rjmp	clear
                                 
                                 set_id:
                                 	nop
                                 	adiw	Y,1
                                 	nop
                                 	ld	r20,-Y
                                 	ld	r21,-Y
                                 	ld	r22,-Y
                                 	ld	r23,-Y
                                 	nop
                                 .endmacro
                                 .include	"initUART.inc"
                                 
                                 
                                 ldi	r16,12		; load baud rate  [(F_CPU/(BouadRate*16))-1]
                                 ldi	r17,0
                                 
                                 out UBRRH, r17
                                 out UBRRL, r16
                                 
                                 ;	double speed mode
                                 sbi	UCSRA,U2X
                                 
                                 ; Enable receiver and transmitter
                                 ldi r16, (1<<RXEN)|(1<<TXEN)
                                 out UCSRB,r16
                                 
                                 ; Set frame format: 8data, 2stop bit
                                 ldi r16, (1<<URSEL)|(1<<USBS)|(3<<UCSZ0)
                                 out UCSRC,r16
                                 
                                 .endmacro
                                 .include	"send_string.inc"
                                 
                                 
                                 ldi	ZL,LOW(2*@0)			; load Z pointer with
                                 ldi	ZH,HIGH(2*@0)
                                 
                                 
                                 puts:	lpm	r16,Z+				; load character from pmem
                                 	cpi	r16,0x00				; check if null
                                 	breq	puts_end
                                 
                                 	puts_wait:
                                 	sbis UCSRA,UDRE			; wait for empty transmit buffer
                                 	rjmp	puts_wait
                                 
                                 	out	UDR,r16			; transmit character
                                 	rjmp	puts
                                 
                                 	puts_end:
                                 	nop
                                 .include	"receive_char.inc"
                                 
                                 
                                 	wait:
                                 ; Wait for data to be received
                                 sbis UCSRA, RXC
                                 rjmp wait
                                 
                                 ; Get and return received data from buffer
                                 in @0, UDR
                                 
                                 ;................................................................................................
                                 .dseg
                                 .org	SRAM_START
                                 
000060                           id:	.byte	20
                                 ;................................................................................................
                                 .cseg
                                 .org	0x00
                                 
000000 e50f
000001 bf0d
000002 e008
000003 bf0e                      	init_stack			;initialize stack by calling its macro
000004 e00c
000005 e010
000006 bd10
000007 b909
000008 9a59
000009 e108
00000a b90a
00000b e80e
00000c bd00                      	init_UART			;initialize	UART (bleutooth)
                                 ;................................................................................................
                                 ;declaring i/o pins ....................................................
00000d e70f                      	ldi r16,0x7f		;make PORT C pin 0-6 output 
00000e bb04                      	out DDRC,r16		;except pin 7 input (bleutooth state)
                                 	;pin0	=	relay
                                 	;pin1	=	buzz
                                 	;pin2	=	led green
                                 	;pin3	=	led blue
                                 	;pin4	=	led red
                                 	;pin7	=	bleutooth state  (INPUT)
00000f e000                      	ldi	r16,0			;all pins LOW
000010 bb04                      	out DDRC,r16
                                 ;............................keypad.......................................................
000011 e00f                      	ldi r16,0x0f			;first 4pins (ROWS) input ... last 4pins (COLS) output
000012 bb07                      	out DDRB,r16
                                 ;................................................................................................
                                 
                                 start:
                                 ;	wait untill bleutooth connected...................	
                                 	connect:
000013 9aac                      		sbi		PORTC,4				;HIGH Red Led
000014 9b9f                      		sbis	PINC,7
000015 cffd                      		rjmp	connect
                                 ;................................................................................................
000016 934f
000017 938f
000018 939f
000019 e248
00001a ec83
00001b e099
00001c 9701
00001d f7f1
00001e 954a
00001f f7d1
000020 919f
000021 918f
000022 914f                      	delay	400
000023 e1e4
000024 e0f4
000025 9105
000026 3000
000027 f021
000028 9b5d
000029 cffe
00002a b90c
00002b cff9
00002c 0000                      	write	welcome				;write elkhazna gahza llsho3'l
00002d 9aac                      	sbi		PORTC,4				;HIGH Red Led
00002e 9aab                      	sbi		PORTC,3 			;HIGH blue Led
00002f 9aaa                      	sbi		PORTC,2				;HIGH green Led
000030 934f
000031 938f
000032 939f
000033 e04a
000034 ec83
000035 e099
000036 9701
000037 f7f1
000038 954a
000039 f7d1
00003a 919f
00003b 918f
00003c 914f                      	delay	100
                                 
00003d e6c0
00003e e0d0
00003f e020
000040 8328
000041 e030
000042 e001
000043 bb08
000044 0000
000045 9bb4
000046 c005
000047 d071
000048 e021
000049 9621
00004a 8328
00004b 9533
00004c 9bb5
00004d c005
00004e d06a
00004f e022
000050 9621
000051 8328
000052 9533
000053 9bb6
000054 c005
000055 d063
000056 e023
000057 9621
000058 8328
000059 9533
00005a 9bb7
00005b c005
00005c d05c
00005d e421
00005e 9621
00005f 8328
000060 9533
000061 e002
000062 bb08
000063 0000
000064 9bb4
000065 c005
000066 d052
000067 e024
000068 9621
000069 8328
00006a 9533
00006b 9bb5
00006c c005
00006d d04b
00006e e025
00006f 9621
000070 8328
000071 9533
000072 9bb6
000073 c005
000074 d044
000075 e026
000076 9621
000077 8328
000078 9533
000079 9bb7
00007a c005
00007b d03d
00007c e422
00007d 9621
00007e 8328
00007f 9533
000080 e004
000081 bb08
000082 0000
000083 9bb4
000084 c005
000085 d033
000086 e027
000087 9621
000088 8328
000089 9533
00008a 9bb5
00008b c005
00008c d02c
00008d e028
00008e 9621
00008f 8328
000090 9533
000091 9bb6
000092 c005
000093 d025
000094 e029
000095 9621
000096 8328
000097 9533
000098 9bb7
000099 c002
00009a d01e
00009b cfa1
00009c e008
00009d bb08
00009e 0000
00009f 9bb4
0000a0 c005
0000a1 d017
0000a2 e22a
0000a3 9621
0000a4 8328
0000a5 9533
0000a6 9bb5
0000a7 c005
0000a8 d010
0000a9 e020
0000aa 9621
0000ab 8328
0000ac 9533
0000ad 9bb6
0000ae c002
0000af d009
0000b0 c016
0000b1 9bb7
0000b2 cf8f
0000b3 d005
0000b4 e424
0000b5 9621
0000b6 8328
0000b7 9533
0000b8 cf89
0000b9 e002
0000ba bb05
0000bb b306
0000bc fd04
0000bd cffb
0000be fd05
0000bf cff9
0000c0 fd06
0000c1 cff7
0000c2 fd07
0000c3 cff5
0000c4 e000
0000c5 bb05
0000c6 9508
0000c7 3034
0000c8 f409
0000c9 d04a
0000ca 934f
0000cb 938f
0000cc 939f
0000cd e342
0000ce ec83
0000cf e099
0000d0 9701
0000d1 f7f1
0000d2 954a
0000d3 f7d1
0000d4 919f
0000d5 918f
0000d6 914f
0000d7 e002
0000d8 bb05
0000d9 934f
0000da 938f
0000db 939f
0000dc e342
0000dd ec83
0000de e099
0000df 9701
0000e0 f7f1
0000e1 954a
0000e2 f7d1
0000e3 919f
0000e4 918f
0000e5 914f
0000e6 e000
0000e7 bb05
0000e8 934f
0000e9 938f
0000ea 939f
0000eb e342
0000ec ec83
0000ed e099
0000ee 9701
0000ef f7f1
0000f0 954a
0000f1 f7d1
0000f2 919f
0000f3 918f
0000f4 914f
0000f5 e002
0000f6 bb05
0000f7 934f
0000f8 938f
0000f9 939f
0000fa e342
0000fb ec83
0000fc e099
0000fd 9701
0000fe f7f1
0000ff 954a
000100 f7d1
000101 919f
000102 918f
000103 914f
000104 e000
000105 bb05
000106 934f
000107 938f
000108 939f
000109 e342
00010a ec83
00010b e099
00010c 9701
00010d f7f1
00010e 954a
00010f f7d1
000110 919f
000111 918f
000112 914f
000113 cf29
000114 0000
000115 9621
000116 0000
000117 914a
000118 915a
000119 916a
00011a 917a
00011b 0000                      	read_id						;start reading id
                                 ;...............................................................................
00011c 0000                      	nop							;no operation	(used for syncronyzation)
00011d 934f
00011e 938f
00011f 939f
000120 e342
000121 ec83
000122 e099
000123 9701
000124 f7f1
000125 954a
000126 f7d1
000127 919f
000128 918f
000129 914f                      	delay	500
00012a e002                      	ldi	r16,2					;blink buzzer   (teet teet)
00012b bb05                      	out PORTC,r16
00012c 934f
00012d 938f
00012e 939f
00012f e144
000130 ec83
000131 e099
000132 9701
000133 f7f1
000134 954a
000135 f7d1
000136 919f
000137 918f
000138 914f                      	delay	200
000139 e000                      	ldi	r16,0
00013a bb05                      	out PORTC,r16
00013b 934f
00013c 938f
00013d 939f
00013e e144
00013f ec83
000140 e099
000141 9701
000142 f7f1
000143 954a
000144 f7d1
000145 919f
000146 918f
000147 914f                      	delay	200
000148 e002                      	ldi	r16,2
000149 bb05                      	out PORTC,r16
00014a 934f
00014b 938f
00014c 939f
00014d e144
00014e ec83
00014f e099
000150 9701
000151 f7f1
000152 954a
000153 f7d1
000154 919f
000155 918f
000156 914f                      	delay	200
000157 e000                      	ldi	r16,0
000158 bb05                      	out PORTC,r16
000159 934f
00015a 938f
00015b 939f
00015c e144
00015d ec83
00015e e099
00015f 9701
000160 f7f1
000161 954a
000162 f7d1
000163 919f
000164 918f
000165 914f                      	delay	200
                                 ;...............................................................................
000166 3071
000167 f441
000168 3062
000169 f431
00016a 3053
00016b f421
00016c 3044
00016d f411
00016e 9418
00016f c001
000170 9498
000171 0000                      	is	1,2,3,4					;check if it is the id of "ahmed" 
000172 f129                      	breq	is_ahmed			;true, write ahmed
000173 3075
000174 f441
000175 3066
000176 f431
000177 3057
000178 f421
000179 3048
00017a f411
00017b 9418
00017c c001
00017d 9498
00017e 0000                      	is	5,6,7,8					;false, check if it is the id of "gemy" and so on ......
00017f f119                      	breq	is_gemy	
000180 3071
000181 f441
000182 3064
000183 f431
000184 3057
000185 f421
000186 3048
000187 f411
000188 9418
000189 c001
00018a 9498
00018b 0000                      	is	1,4,7,8
00018c f109                      	breq	is_sara
                                 
00018d eaee
00018e e0f3
00018f 9105
000190 3000
000191 f021
000192 9b5d
000193 cffe
000194 b90c
000195 cff9
000196 0000                      	write	unknown				;if it is not known id  
000197 c021                      	rjmp	try					;write is trying to open ..........
                                 is_ahmed:
000198 ebee
000199 e0f3
00019a 9105
00019b 3000
00019c f021
00019d 9b5d
00019e cffe
00019f b90c
0001a0 cff9
0001a1 0000                      	write	ahmed
0001a2 c016                      	rjmp	try
                                 is_gemy:
0001a3 ece6
0001a4 e0f3
0001a5 9105
0001a6 3000
0001a7 f021
0001a8 9b5d
0001a9 cffe
0001aa b90c
0001ab cff9
0001ac 0000                      	write	gemy
0001ad c00b                      	rjmp	try
                                 is_sara:
0001ae ecec
0001af e0f3
0001b0 9105
0001b1 3000
0001b2 f021
0001b3 9b5d
0001b4 cffe
0001b5 b90c
0001b6 cff9
0001b7 0000                      	write	sara
0001b8 c000                      	rjmp	try
                                 try:
0001b9 eee0
0001ba e0f3
0001bb 9105
0001bc 3000
0001bd f021
0001be 9b5d
0001bf cffe
0001c0 b90c
0001c1 cff9
0001c2 0000                      	write trying
                                 
0001c3 e008                      	ldi	r16,8					;HIGH blue led
0001c4 bb05                      	out PORTC,r16		
                                 
0001c5 9b5f
0001c6 cffe
0001c7 b10c                      	read	r16					;read bleutooth (wait untill user tell me what shoud i do)
                                 
0001c8 bb05                      	out	PORTC,r16
0001c9 934f
0001ca 938f
0001cb 939f
0001cc ec48
0001cd ec83
0001ce e099
0001cf 9701
0001d0 f7f1
0001d1 954a
0001d2 f7d1
0001d3 919f
0001d4 918f
0001d5 914f                      	delay	2000
                                 
0001d6 ce3c                      	rjmp	start
                                 	
                                 	
                                 	;rjmp	start
                                 
                                 ;	declaring all strings ................................................................
                                 
                                 	;(\n = 0x0d)
0001d7 550d
0001d8 6b6e
0001d9 6f6e
0001da 6e77
0001db 7020
0001dc 7265
0001dd 6f73
0001de 006e                      	unknown:	.db		0x0d,"Unknown person",0x00
0001df 610d
0001e0 6d68
0001e1 6465
0001e2 0020                      	ahmed:		.db		0x0d,"ahmed ",0x00
0001e3 670d
0001e4 6d65
0001e5 0079                      	gemy:		.db		0x0d,"gemy",0x00
0001e6 730d
0001e7 7261
0001e8 0061                      	sara:		.db		0x0d,"sara",0x00
0001e9 640d
0001ea 336f
0001eb 3261
0001ec 0020                      	do3aa:		.db		0x0d,"do3a2 ",0x00
0001ed 610d
0001ee 6179
0001ef 0020                      	aya:		.db		0x0d,"aya ",0x00
0001f0 6920
0001f1 2073
0001f2 7274
0001f3 6979
0001f4 676e
0001f5 7420
0001f6 206f
0001f7 706f
0001f8 6e65
0001f9 7420
0001fa 6568
0001fb 6b20
0001fc 6168
0001fd 6e7a
0001fe 0d61
0001ff 770d
000200 6168
000201 2074
000202 6873
000203 756f
000204 646c
000205 6920
000206 6420
000207 3f6f
000208 0d21
000209 000d                      	trying:		.db		" is trying to open the khazna",0x0d,0x0d,"what should i do?!",0x0d,0x0d,0x00
                                 
00020a 650d
00020b 6b6c
00020c 6168
00020d 6e7a
00020e 2061
00020f 6167
000210 7a68
000211 2061
000212 6c6c
000213 6873
000214 336f
000215 6c27
000216 2e2e
000217 2e2e
000218 212e
000219 000d                      	welcome:	.db		0x0d,"elkhazna gahza llsho3'l.....!",0x0d,0x00
00021a 650d
00021b 6b6c
00021c 6168
00021d 6e7a
00021e 2061
00021f 2066
000220 6135
000221 7474
000222 6161
000223 6161
000224 6161
000225 6161
000226 6161
000227 6161
000228 6161
000229 2e72
00022a 2e2e
00022b 212e
00022c 2121
00022d 2121
00022e 000d                      	khatar:		.db		0x0d,"elkhazna f 5attaaaaaaaaaaaaaar....!!!!!",0x0d,0x00
00022f 650d
000230 746e
000231 7265
000232 7420
000233 6568
000234 7020
000235 7361
000236 7773
000237 726f
000238 2e64
000239 2e2e
00023a 212e
00023b 000d                      	pass:		.db		0x0d,"enter the password....!",0x0d,0x00
00023c 650d
00023d 6b6c
00023e 6168
00023f 6e7a
000240 2061
000241 7465
000242 6166
000243 3774
000244 2065
000245 000d                      	open:		.db		0x0d,"elkhazna etfat7e ",0x0d,0x00
000246 650d
000247 6b6c
000248 6168
000249 6e7a
00024a 2061
00024b 7465
00024c 6632
00024d 746c
00024e 000d                      	close:		.db		0x0d,"elkhazna et2flt",0x0d,0x00
                                 ;................................................................................................................................	
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   0 y  :  34 z  :   6 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  71 r17:   2 r18:  30 r19:  16 r20:  56 
r21:   4 r22:   4 r23:   4 r24:  52 r25:  39 r26:   0 r27:   0 r28:   1 
r29:   1 r30:   6 r31:   6 
Registers used: 16 out of 35 (45.7%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :  15 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   9 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  39 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   3 com   :   0 cp    :   0 cpc   :   0 
cpi   :  19 cpse  :   0 dec   :  13 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 inc   :  14 jmp   :   0 
ld    :   4 ldd   :   0 ldi   :  93 lds   :   0 lpm   :   6 lsl   :   0 
lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  17 or    :   0 ori   :   0 out   :  31 pop   :  39 
push  :  39 rcall :  17 ret   :   1 reti  :   0 rjmp  :  46 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   5 sbic  :   0 sbis  :  24 
sbiw  :  13 sbr   :   0 sbrc  :   4 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   3 sleep :   0 spm   :   0 st    :  15 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 24 out of 113 (21.2%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00049e    942    240   1182   32768   3.6%
[.dseg] 0x000060 0x000074      0     20     20    2048   1.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
