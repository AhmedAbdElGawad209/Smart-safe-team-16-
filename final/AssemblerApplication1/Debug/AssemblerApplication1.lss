
AVRASM ver. 2.2.8  D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm Fri Jan 07 04:03:20 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(3): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\delay_function.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(4): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\set stack.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(5): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\compare.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(6): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\keypad.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(7): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\initUART.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(8): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\send_string.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(9): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\receive_char.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(3): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\delay_function.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(4): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\set stack.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(5): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\compare.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(6): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\keypad.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(7): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\initUART.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(8): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\send_string.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(9): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\receive_char.inc'
                                 
                                 ;	including all libraries................................................
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 .include	"m32def.inc"			;atmega32	library
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 .include	"delay_function.inc"
                                 
                                 ;push the 3 registers that we will use  
                                 push r20 
                                 push r24
                                 push r25
                                 
                                 
                                 ldi r20,@0/10		; the delay time entered by the user 
                                 
                                 outerloop:										; outer loop
                                 			ldi		r24,LOW(2499)					; initialize itirators at the begining each time
                                 			ldi		r25,HIGH(2499) 
                                 
                                 innerloop:
                                 			sbiw	r24,1
                                 			brne	innerloop					; loop (i) times
                                 
                                 			dec		r20 
                                 			brne	outerloop					; loop (r20) times
                                 
                                 ;pop the registers again
                                 pop r25
                                 pop r24
                                 pop r20
                                 .include	"set stack.inc"
                                 
                                 
                                 ldi		r16,LOW(RAMEND)  ;first address of stack segmant 
                                 out		SPL,r16
                                 ldi		r16,HIGH(RAMEND) 
                                 out		SPH,r16
                                 
                                 .include	"compare.inc"
                                 
                                 	cpi	r23,@0
                                 	brne	no
                                 	cpi	r22,@1
                                 	brne	no
                                 	cpi	r21,@2
                                 	brne	no
                                 	cpi	r20,@3
                                 	brne	no
                                 	SEZ
                                 	rjmp	end
                                 no:
                                 	CLZ
                                 end:
                                 	nop
                                 .include	"keypad.inc"
                                 
                                 ;............................keypad.......................................................
                                 clear:
                                 	ldi	YL,LOW(id)
                                 	ldi	YH,HIGH(id)
                                 	ldi	r18,0
                                 	st	Y,r18
                                 	ldi	r19,0
                                 startk:			
                                 	ldi r16,0x01			;HIGH row 1
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next1
                                 	rcall	hold
                                 	ldi	r18,1
                                 	adiw	Y,1
                                 	st	Y,r18	
                                 	inc	r19
                                 next1:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next2
                                 	rcall	hold
                                 	ldi	r18,2
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next2:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next3
                                 	rcall	hold
                                 	ldi	r18,3
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next3:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next4
                                 	rcall	hold
                                 	ldi	r18,'A'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next4:
                                 	ldi r16,0x02				;;HIGH row 2
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next5
                                 	rcall	hold
                                 	ldi	r18,4
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next5:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next6
                                 	rcall	hold
                                 	ldi	r18,5
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next6:		
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next7
                                 	rcall	hold
                                 	ldi	r18,6
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next7:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next8
                                 	rcall	hold
                                 	ldi	r18,'B'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next8:
                                 	ldi r16,0x04			;HIGH row 3
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next9
                                 	rcall	hold
                                 	ldi	r18,7
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next9:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next10
                                 	rcall	hold
                                 	ldi	r18,8
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next10:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next11
                                 	rcall	hold
                                 	ldi	r18,9
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next11:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next12
                                 	rcall	hold
                                 	rjmp	clear
                                 next12:
                                 	ldi r16,0x08				;HIGH row 4
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next13
                                 	rcall	hold
                                 	ldi	r18,'*'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next13:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next14
                                 	rcall	hold
                                 	ldi	r18,0
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next14:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next15
                                 	rcall	hold
                                 	rjmp	check
                                 next15:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	startk
                                 	rcall	hold
                                 	ldi	r18,'D'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 rjmp  startk
                                 
                                 hold:
                                 	ldi	r16,2
                                 	out	PORTC,r16
                                 	in	r16,PINB
                                 	sbrc	r16,4
                                 	rjmp hold
                                 	sbrc	r16,5
                                 	rjmp hold
                                 	sbrc	r16,6
                                 	rjmp hold
                                 	sbrc	r16,7
                                 	rjmp hold
                                 	ldi	r16,0
                                 	out	PORTC,r16
                                 	ret
                                 
                                 check:
                                 	cpi	r19,4
                                 	brne	a
                                 	rcall	set_id	
                                 a:
                                 delay	500
                                 ldi	r16,2
                                 out	PORTC,r16
                                 delay	500
                                 ldi	r16,0
                                 out	PORTC,r16
                                 delay	500
                                 ldi	r16,2
                                 out	PORTC,r16
                                 delay	500
                                 ldi	r16,0
                                 out	PORTC,r16
                                 delay	500
                                 rjmp	clear
                                 
                                 set_id:
                                 	nop
                                 	adiw	Y,1
                                 	nop
                                 	ld	r20,-Y
                                 	ld	r21,-Y
                                 	ld	r22,-Y
                                 	ld	r23,-Y
                                 	nop
                                 .endmacro
                                 .include	"initUART.inc"
                                 
                                 
                                 ldi	r16,12		; load baud rate  [(F_CPU/(BouadRate*16))-1]
                                 ldi	r17,0
                                 
                                 out UBRRH, r17
                                 out UBRRL, r16
                                 
                                 ;	double speed mode
                                 sbi	UCSRA,U2X
                                 
                                 ; Enable receiver and transmitter
                                 ldi r16, (1<<RXEN)|(1<<TXEN)
                                 out UCSRB,r16
                                 
                                 ; Set frame format: 8data, 2stop bit
                                 ldi r16, (1<<URSEL)|(1<<USBS)|(3<<UCSZ0)
                                 out UCSRC,r16
                                 
                                 .endmacro
                                 .include	"send_string.inc"
                                 
                                 
                                 ldi	ZL,LOW(2*@0)			; load Z pointer with
                                 ldi	ZH,HIGH(2*@0)
                                 
                                 
                                 puts:	lpm	r16,Z+				; load character from pmem
                                 	cpi	r16,0x00				; check if null
                                 	breq	puts_end
                                 
                                 	puts_wait:
                                 	sbis UCSRA,UDRE			; wait for empty transmit buffer
                                 	rjmp	puts_wait
                                 
                                 	out	UDR,r16			; transmit character
                                 	rjmp	puts
                                 
                                 	puts_end:
                                 	nop
                                 .include	"receive_char.inc"
                                 
                                 
                                 	wait:
                                 ; Wait for data to be received
                                 sbis UCSRA, RXC
                                 rjmp wait
                                 
                                 ; Get and return received data from buffer
                                 in @0, UDR
                                 
                                 ;................................................................................................
                                 .dseg
                                 .org	SRAM_START
                                 
000060                           id:	.byte	20
                                 ;................................................................................................
                                 .cseg
                                 .org	0x00
                                 
000000 e50f
000001 bf0d
000002 e008
000003 bf0e                      	init_stack			;initialize stack by calling its macro
000004 e00c
000005 e010
000006 bd10
000007 b909
000008 9a59
000009 e108
00000a b90a
00000b e80e
00000c bd00                      	init_UART			;initialize	UART (bleutooth)
                                 ;................................................................................................
                                 ;declaring i/o pins ....................................................
00000d ef0f                      	ldi r16,0xff		;make PORT C pin all output 
00000e bb04                      	out DDRC,r16		
                                 	;pin0	=	relay
                                 	;pin1	=	buzz
                                 	;pin2	=	led green
                                 	;pin3	=	led blue
                                 	;pin4	=	led red
                                 
                                 	;PORTD pin7	=	bleutooth state  (INPUT)
                                 
00000f 988f                      	cbi	DDRD,7			;pin7 in PORTD input for bleutooth state pin 	
                                 ;................................................................................................
                                 ;............................keypad.......................................................
000010 e00f                      	ldi r16,0x0f			;first 4pins (ROWS) input ... last 4pins (COLS) output
000011 bb07                      	out DDRB,r16
                                 ;................................................................................................
                                 
                                 start:
000012 e000                      	ldi	r16,0			;all pins LOW
000013 bb04                      	out DDRC,r16
                                 ;	wait untill bleutooth connected...................	
                                 	connect:
000014 9aac                      		sbi		PORTC,4				;HIGH Red Led
000015 9b87                      		sbis	PIND,7
000016 cffd                      		rjmp	connect
                                 ;................................................................................................
000017 934f
000018 938f
000019 939f
00001a e248
00001b ec83
00001c e099
00001d 9701
00001e f7f1
00001f 954a
000020 f7d1
000021 919f
000022 918f
000023 914f                      	delay	400
000024 ede4
000025 e0f7
000026 9105
000027 3000
000028 f021
000029 9b5d
00002a cffe
00002b b90c
00002c cff9
00002d 0000                      	write	welcome				;write elkhazna gahza llsho3'l
00002e 9aac                      	sbi		PORTC,4				;HIGH Red Led
00002f 9aab                      	sbi		PORTC,3 			;HIGH blue Led
000030 9aaa                      	sbi		PORTC,2				;HIGH green Led
000031 934f
000032 938f
000033 939f
000034 e04a
000035 ec83
000036 e099
000037 9701
000038 f7f1
000039 954a
00003a f7d1
00003b 919f
00003c 918f
00003d 914f                      	delay	100
                                 
00003e e6c0
00003f e0d0
000040 e020
000041 8328
000042 e030
000043 e001
000044 bb08
000045 0000
000046 9bb4
000047 c005
000048 d071
000049 e021
00004a 9621
00004b 8328
00004c 9533
00004d 9bb5
00004e c005
00004f d06a
000050 e022
000051 9621
000052 8328
000053 9533
000054 9bb6
000055 c005
000056 d063
000057 e023
000058 9621
000059 8328
00005a 9533
00005b 9bb7
00005c c005
00005d d05c
00005e e421
00005f 9621
000060 8328
000061 9533
000062 e002
000063 bb08
000064 0000
000065 9bb4
000066 c005
000067 d052
000068 e024
000069 9621
00006a 8328
00006b 9533
00006c 9bb5
00006d c005
00006e d04b
00006f e025
000070 9621
000071 8328
000072 9533
000073 9bb6
000074 c005
000075 d044
000076 e026
000077 9621
000078 8328
000079 9533
00007a 9bb7
00007b c005
00007c d03d
00007d e422
00007e 9621
00007f 8328
000080 9533
000081 e004
000082 bb08
000083 0000
000084 9bb4
000085 c005
000086 d033
000087 e027
000088 9621
000089 8328
00008a 9533
00008b 9bb5
00008c c005
00008d d02c
00008e e028
00008f 9621
000090 8328
000091 9533
000092 9bb6
000093 c005
000094 d025
000095 e029
000096 9621
000097 8328
000098 9533
000099 9bb7
00009a c002
00009b d01e
00009c cfa1
00009d e008
00009e bb08
00009f 0000
0000a0 9bb4
0000a1 c005
0000a2 d017
0000a3 e22a
0000a4 9621
0000a5 8328
0000a6 9533
0000a7 9bb5
0000a8 c005
0000a9 d010
0000aa e020
0000ab 9621
0000ac 8328
0000ad 9533
0000ae 9bb6
0000af c002
0000b0 d009
0000b1 c016
0000b2 9bb7
0000b3 cf8f
0000b4 d005
0000b5 e424
0000b6 9621
0000b7 8328
0000b8 9533
0000b9 cf89
0000ba e002
0000bb bb05
0000bc b306
0000bd fd04
0000be cffb
0000bf fd05
0000c0 cff9
0000c1 fd06
0000c2 cff7
0000c3 fd07
0000c4 cff5
0000c5 e000
0000c6 bb05
0000c7 9508
0000c8 3034
0000c9 f409
0000ca d04a
0000cb 934f
0000cc 938f
0000cd 939f
0000ce e342
0000cf ec83
0000d0 e099
0000d1 9701
0000d2 f7f1
0000d3 954a
0000d4 f7d1
0000d5 919f
0000d6 918f
0000d7 914f
0000d8 e002
0000d9 bb05
0000da 934f
0000db 938f
0000dc 939f
0000dd e342
0000de ec83
0000df e099
0000e0 9701
0000e1 f7f1
0000e2 954a
0000e3 f7d1
0000e4 919f
0000e5 918f
0000e6 914f
0000e7 e000
0000e8 bb05
0000e9 934f
0000ea 938f
0000eb 939f
0000ec e342
0000ed ec83
0000ee e099
0000ef 9701
0000f0 f7f1
0000f1 954a
0000f2 f7d1
0000f3 919f
0000f4 918f
0000f5 914f
0000f6 e002
0000f7 bb05
0000f8 934f
0000f9 938f
0000fa 939f
0000fb e342
0000fc ec83
0000fd e099
0000fe 9701
0000ff f7f1
000100 954a
000101 f7d1
000102 919f
000103 918f
000104 914f
000105 e000
000106 bb05
000107 934f
000108 938f
000109 939f
00010a e342
00010b ec83
00010c e099
00010d 9701
00010e f7f1
00010f 954a
000110 f7d1
000111 919f
000112 918f
000113 914f
000114 cf29
000115 0000
000116 9621
000117 0000
000118 914a
000119 915a
00011a 916a
00011b 917a
00011c 0000                      	read_id						;start reading id
                                 ;...............................................................................
00011d 0000                      	nop							;no operation	(used for syncronyzation)
00011e 934f
00011f 938f
000120 939f
000121 e342
000122 ec83
000123 e099
000124 9701
000125 f7f1
000126 954a
000127 f7d1
000128 919f
000129 918f
00012a 914f                      	delay	500
00012b e002                      	ldi	r16,2					;blink buzzer   (teet teet)
00012c bb05                      	out PORTC,r16
00012d 934f
00012e 938f
00012f 939f
000130 e144
000131 ec83
000132 e099
000133 9701
000134 f7f1
000135 954a
000136 f7d1
000137 919f
000138 918f
000139 914f                      	delay	200
00013a e000                      	ldi	r16,0
00013b bb05                      	out PORTC,r16
00013c 934f
00013d 938f
00013e 939f
00013f e144
000140 ec83
000141 e099
000142 9701
000143 f7f1
000144 954a
000145 f7d1
000146 919f
000147 918f
000148 914f                      	delay	200
000149 e002                      	ldi	r16,2
00014a bb05                      	out PORTC,r16
00014b 934f
00014c 938f
00014d 939f
00014e e144
00014f ec83
000150 e099
000151 9701
000152 f7f1
000153 954a
000154 f7d1
000155 919f
000156 918f
000157 914f                      	delay	200
000158 e000                      	ldi	r16,0
000159 bb05                      	out PORTC,r16
00015a 934f
00015b 938f
00015c 939f
00015d e144
00015e ec83
00015f e099
000160 9701
000161 f7f1
000162 954a
000163 f7d1
000164 919f
000165 918f
000166 914f                      	delay	200
                                 ;...............................................................................
000167 3071
000168 f441
000169 3062
00016a f431
00016b 3053
00016c f421
00016d 3044
00016e f411
00016f 9418
000170 c001
000171 9498
000172 0000                      	is	1,2,3,4					;check if it is the id of "ahmed" 
000173 f129                      	breq	is_ahmed			;true, write ahmed
000174 3075
000175 f441
000176 3066
000177 f431
000178 3057
000179 f421
00017a 3048
00017b f411
00017c 9418
00017d c001
00017e 9498
00017f 0000                      	is	5,6,7,8					;false, check if it is the id of "gemy" and so on ......
000180 f119                      	breq	is_gemy	
000181 3071
000182 f441
000183 3064
000184 f431
000185 3057
000186 f421
000187 3048
000188 f411
000189 9418
00018a c001
00018b 9498
00018c 0000                      	is	1,4,7,8
00018d f109                      	breq	is_sara
                                 
00018e e6ee
00018f e0f7
000190 9105
000191 3000
000192 f021
000193 9b5d
000194 cffe
000195 b90c
000196 cff9
000197 0000                      	write	unknown				;if it is not known id  
000198 c021                      	rjmp	try					;write is trying to open ..........
                                 is_ahmed:
000199 e7ee
00019a e0f7
00019b 9105
00019c 3000
00019d f021
00019e 9b5d
00019f cffe
0001a0 b90c
0001a1 cff9
0001a2 0000                      	write	ahmed
0001a3 c016                      	rjmp	try
                                 is_gemy:
0001a4 e8e6
0001a5 e0f7
0001a6 9105
0001a7 3000
0001a8 f021
0001a9 9b5d
0001aa cffe
0001ab b90c
0001ac cff9
0001ad 0000                      	write	gemy
0001ae c00b                      	rjmp	try
                                 is_sara:
0001af e8ec
0001b0 e0f7
0001b1 9105
0001b2 3000
0001b3 f021
0001b4 9b5d
0001b5 cffe
0001b6 b90c
0001b7 cff9
0001b8 0000                      	write	sara
0001b9 c000                      	rjmp	try
                                 try:
0001ba eae0
0001bb e0f7
0001bc 9105
0001bd 3000
0001be f021
0001bf 9b5d
0001c0 cffe
0001c1 b90c
0001c2 cff9
0001c3 0000                      	write trying
                                 
0001c4 e008                      	ldi	r16,8					;HIGH blue led
0001c5 bb05                      	out PORTC,r16		
                                 
0001c6 9b5f
0001c7 cffe
0001c8 b10c                      	read	r16					;read bleutooth (wait untill user tell me what shoud i do)
                                 
0001c9 3301                      	cpi	r16,'1'					;'1' means allow
0001ca f409                      	brne	a
0001cb c16a                      	rjmp	allow	
                                 a:				
0001cc 3302                      	cpi	r16,'2'					;'2' means reject
0001cd f409                      	brne	b
0001ce c001                      	rjmp	reject
                                 b:
0001cf c068                      	rjmp	alarm				;otherwise	 alarm 
                                 
                                 	
                                 	
                                 reject:
                                 ;blink buzz & red led...............
0001d0 934f
0001d1 938f
0001d2 939f
0001d3 e342
0001d4 ec83
0001d5 e099
0001d6 9701
0001d7 f7f1
0001d8 954a
0001d9 f7d1
0001da 919f
0001db 918f
0001dc 914f                      	delay	500
0001dd e102                      	ldi	r16,0b00010010			;HIGH
0001de bb05                      	out PORTC,r16
0001df 934f
0001e0 938f
0001e1 939f
0001e2 e446
0001e3 ec83
0001e4 e099
0001e5 9701
0001e6 f7f1
0001e7 954a
0001e8 f7d1
0001e9 919f
0001ea 918f
0001eb 914f                      	delay	700
0001ec e000                      	ldi	r16,0					;LOW
0001ed bb05                      	out PORTC,r16
0001ee 934f
0001ef 938f
0001f0 939f
0001f1 e446
0001f2 ec83
0001f3 e099
0001f4 9701
0001f5 f7f1
0001f6 954a
0001f7 f7d1
0001f8 919f
0001f9 918f
0001fa 914f                      	delay	700
0001fb e102                      	ldi	r16,0b00010010		
0001fc bb05                      	out PORTC,r16
0001fd 934f
0001fe 938f
0001ff 939f
000200 e446
000201 ec83
000202 e099
000203 9701
000204 f7f1
000205 954a
000206 f7d1
000207 919f
000208 918f
000209 914f                      	delay	700
00020a e000                      	ldi	r16,0		
00020b bb05                      	out PORTC,r16
00020c 934f
00020d 938f
00020e 939f
00020f e446
000210 ec83
000211 e099
000212 9701
000213 f7f1
000214 954a
000215 f7d1
000216 919f
000217 918f
000218 914f                      	delay	700
000219 e102                      	ldi	r16,0b00010010		
00021a bb05                      	out PORTC,r16
00021b 934f
00021c 938f
00021d 939f
00021e e446
00021f ec83
000220 e099
000221 9701
000222 f7f1
000223 954a
000224 f7d1
000225 919f
000226 918f
000227 914f                      	delay	700
000228 e000                      	ldi	r16,0		
000229 bb05                      	out PORTC,r16
00022a 934f
00022b 938f
00022c 939f
00022d ef4a
00022e ec83
00022f e099
000230 9701
000231 f7f1
000232 954a
000233 f7d1
000234 919f
000235 918f
000236 914f                      	delay	2500
                                 
000237 cdda                      	rjmp	start						;return to start
                                 
                                 alarm:
                                 ;blink buzz & red led (quickly)...............
000238 934f
000239 938f
00023a 939f
00023b e342
00023c ec83
00023d e099
00023e 9701
00023f f7f1
000240 954a
000241 f7d1
000242 919f
000243 918f
000244 914f                      	delay	500
000245 e102                      	ldi	r16,0b00010010			;HIGH
000246 bb05                      	out PORTC,r16
000247 934f
000248 938f
000249 939f
00024a e144
00024b ec83
00024c e099
00024d 9701
00024e f7f1
00024f 954a
000250 f7d1
000251 919f
000252 918f
000253 914f                      	delay	200
000254 e000                      	ldi	r16,0					;LOW
000255 bb05                      	out PORTC,r16
000256 934f
000257 938f
000258 939f
000259 e144
00025a ec83
00025b e099
00025c 9701
00025d f7f1
00025e 954a
00025f f7d1
000260 919f
000261 918f
000262 914f                      	delay	200
000263 e102                      	ldi	r16,0b00010010		
000264 bb05                      	out PORTC,r16
000265 934f
000266 938f
000267 939f
000268 e144
000269 ec83
00026a e099
00026b 9701
00026c f7f1
00026d 954a
00026e f7d1
00026f 919f
000270 918f
000271 914f                      	delay	200
000272 e000                      	ldi	r16,0		
000273 bb05                      	out PORTC,r16
000274 934f
000275 938f
000276 939f
000277 e144
000278 ec83
000279 e099
00027a 9701
00027b f7f1
00027c 954a
00027d f7d1
00027e 919f
00027f 918f
000280 914f                      	delay	200
000281 e102                      	ldi	r16,0b00010010		
000282 bb05                      	out PORTC,r16
000283 934f
000284 938f
000285 939f
000286 e144
000287 ec83
000288 e099
000289 9701
00028a f7f1
00028b 954a
00028c f7d1
00028d 919f
00028e 918f
00028f 914f                      	delay	200
000290 e000                      	ldi	r16,0		
000291 bb05                      	out PORTC,r16
000292 934f
000293 938f
000294 939f
000295 e144
000296 ec83
000297 e099
000298 9701
000299 f7f1
00029a 954a
00029b f7d1
00029c 919f
00029d 918f
00029e 914f                      	delay	200
00029f e102                      	ldi	r16,0b00010010			;HIGH
0002a0 bb05                      	out PORTC,r16
0002a1 934f
0002a2 938f
0002a3 939f
0002a4 e144
0002a5 ec83
0002a6 e099
0002a7 9701
0002a8 f7f1
0002a9 954a
0002aa f7d1
0002ab 919f
0002ac 918f
0002ad 914f                      	delay	200
0002ae e000                      	ldi	r16,0					;LOW
0002af bb05                      	out PORTC,r16
0002b0 934f
0002b1 938f
0002b2 939f
0002b3 e144
0002b4 ec83
0002b5 e099
0002b6 9701
0002b7 f7f1
0002b8 954a
0002b9 f7d1
0002ba 919f
0002bb 918f
0002bc 914f                      	delay	200
0002bd e102                      	ldi	r16,0b00010010		
0002be bb05                      	out PORTC,r16
0002bf 934f
0002c0 938f
0002c1 939f
0002c2 e144
0002c3 ec83
0002c4 e099
0002c5 9701
0002c6 f7f1
0002c7 954a
0002c8 f7d1
0002c9 919f
0002ca 918f
0002cb 914f                      	delay	200
0002cc e000                      	ldi	r16,0		
0002cd bb05                      	out PORTC,r16
0002ce 934f
0002cf 938f
0002d0 939f
0002d1 e144
0002d2 ec83
0002d3 e099
0002d4 9701
0002d5 f7f1
0002d6 954a
0002d7 f7d1
0002d8 919f
0002d9 918f
0002da 914f                      	delay	200
0002db e102                      	ldi	r16,0b00010010		
0002dc bb05                      	out PORTC,r16
0002dd 934f
0002de 938f
0002df 939f
0002e0 e144
0002e1 ec83
0002e2 e099
0002e3 9701
0002e4 f7f1
0002e5 954a
0002e6 f7d1
0002e7 919f
0002e8 918f
0002e9 914f                      	delay	200
0002ea e000                      	ldi	r16,0		
0002eb bb05                      	out PORTC,r16
0002ec 934f
0002ed 938f
0002ee 939f
0002ef e144
0002f0 ec83
0002f1 e099
0002f2 9701
0002f3 f7f1
0002f4 954a
0002f5 f7d1
0002f6 919f
0002f7 918f
0002f8 914f                      	delay	200
0002f9 e102                      	ldi	r16,0b00010010		
0002fa bb05                      	out PORTC,r16
0002fb 934f
0002fc 938f
0002fd 939f
0002fe e144
0002ff ec83
000300 e099
000301 9701
000302 f7f1
000303 954a
000304 f7d1
000305 919f
000306 918f
000307 914f                      	delay	200
000308 e000                      	ldi	r16,0		
000309 bb05                      	out PORTC,r16
00030a 934f
00030b 938f
00030c 939f
00030d e144
00030e ec83
00030f e099
000310 9701
000311 f7f1
000312 954a
000313 f7d1
000314 919f
000315 918f
000316 914f                      	delay	200
000317 e102                      	ldi	r16,0b00010010		
000318 bb05                      	out PORTC,r16
000319 934f
00031a 938f
00031b 939f
00031c e144
00031d ec83
00031e e099
00031f 9701
000320 f7f1
000321 954a
000322 f7d1
000323 919f
000324 918f
000325 914f                      	delay	200
000326 e000                      	ldi	r16,0		
000327 bb05                      	out PORTC,r16
000328 934f
000329 938f
00032a 939f
00032b ef4a
00032c ec83
00032d e099
00032e 9701
00032f f7f1
000330 954a
000331 f7d1
000332 919f
000333 918f
000334 914f                      	delay	2500
                                 
000335 ccdc                      	rjmp	start						;return to start
                                 
                                 allow:
000336 934f
000337 938f
000338 939f
000339 e342
00033a ec83
00033b e099
00033c 9701
00033d f7f1
00033e 954a
00033f f7d1
000340 919f
000341 918f
000342 914f                      	delay	500
000343 e1ee
000344 e0f8
000345 9105
000346 3000
000347 f021
000348 9b5d
000349 cffe
00034a b90c
00034b cff9
00034c 0000                      	write	pass						;request the owner password
00034d 934f
00034e 938f
00034f 939f
000350 e04a
000351 ec83
000352 e099
000353 9701
000354 f7f1
000355 954a
000356 f7d1
000357 919f
000358 918f
000359 914f                      	delay	100
                                 
00035a 9b5f
00035b cffe
00035c b10c                      	read	r16							;read the first character of the password
00035d 9b5f
00035e cffe
00035f b11c                      	read	r17							;read the second character of the password
000360 9b5f
000361 cffe
000362 b12c                      	read	r18							;read the third character of the password
000363 9b5f
000364 cffe
000365 b13c                      	read	r19							;read the fourth character of the password
                                 ;the password is "0000"...................................................................................
000366 3300                      	cpi	r16,'0'							;alarm if any digit of entered password	is mistake
000367 f431                      	brne	c							
000368 3310                      	cpi	r17,'0'
000369 f421                      	brne	c							
00036a 3320                      	cpi	r18,'0'
00036b f411                      	brne	c
00036c 3330                      	cpi	r19,'0'
00036d f009                      	breq	correct
                                 c:
00036e cec9                      	rjmp	alarm
                                 
                                 correct:		
                                 ;correct password.............................................................
00036f 934f
000370 938f
000371 939f
000372 e144
000373 ec83
000374 e099
000375 9701
000376 f7f1
000377 954a
000378 f7d1
000379 919f
00037a 918f
00037b 914f                      	delay	200
00037c e006                      	ldi	r16,0b00000110					;HIGH buzz & green led
00037d bb05                      	out PORTC,r16
00037e 934f
00037f 938f
000380 939f
000381 e540
000382 ec83
000383 e099
000384 9701
000385 f7f1
000386 954a
000387 f7d1
000388 919f
000389 918f
00038a 914f                      	delay	800
00038b 98a9                      	cbi	PORTC,1							;LOW buzz 
00038c 9aa8                      	sbi	PORTC,0							;HIGH relay		(open the khazna)
00038d 934f
00038e 938f
00038f 939f
000390 e342
000391 ec83
000392 e099
000393 9701
000394 f7f1
000395 954a
000396 f7d1
000397 919f
000398 918f
000399 914f                      	delay	500							;for 0.5 second
00039a 98a8                      	cbi	PORTC,0							;LOW relay
                                 
00039b 98aa                      	cbi	PORTC,2
00039c 934f
00039d 938f
00039e 939f
00039f ef4a
0003a0 ec83
0003a1 e099
0003a2 9701
0003a3 f7f1
0003a4 954a
0003a5 f7d1
0003a6 919f
0003a7 918f
0003a8 914f                      	delay	2500
0003a9 934f
0003aa 938f
0003ab 939f
0003ac ef4a
0003ad ec83
0003ae e099
0003af 9701
0003b0 f7f1
0003b1 954a
0003b2 f7d1
0003b3 919f
0003b4 918f
0003b5 914f                      	delay	2500
0003b6 cc5b                      	rjmp	start
                                 
                                 ;............................................................................................................................
                                 
                                 ;	declaring all strings ................................................................
                                 
                                 	;(\n = 0x0d)
0003b7 550d
0003b8 6b6e
0003b9 6f6e
0003ba 6e77
0003bb 7020
0003bc 7265
0003bd 6f73
0003be 006e                      	unknown:	.db		0x0d,"Unknown person",0x00
0003bf 610d
0003c0 6d68
0003c1 6465
0003c2 0020                      	ahmed:		.db		0x0d,"ahmed ",0x00
0003c3 670d
0003c4 6d65
0003c5 0079                      	gemy:		.db		0x0d,"gemy",0x00
0003c6 730d
0003c7 7261
0003c8 0061                      	sara:		.db		0x0d,"sara",0x00
0003c9 640d
0003ca 336f
0003cb 3261
0003cc 0020                      	do3aa:		.db		0x0d,"do3a2 ",0x00
0003cd 610d
0003ce 6179
0003cf 0020                      	aya:		.db		0x0d,"aya ",0x00
0003d0 6920
0003d1 2073
0003d2 7274
0003d3 6979
0003d4 676e
0003d5 7420
0003d6 206f
0003d7 706f
0003d8 6e65
0003d9 7420
0003da 6568
0003db 6b20
0003dc 6168
0003dd 6e7a
0003de 0d61
0003df 770d
0003e0 6168
0003e1 2074
0003e2 6873
0003e3 756f
0003e4 646c
0003e5 6920
0003e6 6420
0003e7 3f6f
0003e8 0d21
0003e9 000d                      	trying:		.db		" is trying to open the khazna",0x0d,0x0d,"what should i do?!",0x0d,0x0d,0x00
                                 
0003ea 650d
0003eb 6b6c
0003ec 6168
0003ed 6e7a
0003ee 2061
0003ef 6167
0003f0 7a68
0003f1 2061
0003f2 6c6c
0003f3 6873
0003f4 336f
0003f5 6c27
0003f6 2e2e
0003f7 2e2e
0003f8 212e
0003f9 000d                      	welcome:	.db		0x0d,"elkhazna gahza llsho3'l.....!",0x0d,0x00
0003fa 650d
0003fb 6b6c
0003fc 6168
0003fd 6e7a
0003fe 2061
0003ff 2066
000400 6135
000401 7474
000402 6161
000403 6161
000404 6161
000405 6161
000406 6161
000407 6161
000408 6161
000409 2e72
00040a 2e2e
00040b 212e
00040c 2121
00040d 2121
00040e 000d                      	khatar:		.db		0x0d,"elkhazna f 5attaaaaaaaaaaaaaar....!!!!!",0x0d,0x00
00040f 650d
000410 746e
000411 7265
000412 7420
000413 6568
000414 7020
000415 7361
000416 7773
000417 726f
000418 2e64
000419 2e2e
00041a 212e
00041b 000d                      	pass:		.db		0x0d,"enter the password....!",0x0d,0x00
00041c 650d
00041d 6b6c
00041e 6168
00041f 6e7a
000420 2061
000421 7465
000422 6166
000423 3774
000424 2065
000425 000d                      	open:		.db		0x0d,"elkhazna etfat7e ",0x0d,0x00
000426 650d
000427 6b6c
000428 6168
000429 6e7a
00042a 2061
00042b 7465
00042c 6632
00042d 746c
00042e 000d                      	close:		.db		0x0d,"elkhazna et2flt",0x0d,0x00
                                 ;................................................................................................................................	
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   0 y  :  34 z  :   7 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 123 r17:   4 r18:  32 r19:  18 r20: 176 
r21:   4 r22:   4 r23:   4 r24: 172 r25: 129 r26:   0 r27:   0 r28:   1 
r29:   1 r30:   7 r31:   7 
Registers used: 16 out of 35 (45.7%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :  15 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  11 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  : 104 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   4 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   3 com   :   0 cp    :   0 cpc   :   0 
cpi   :  26 cpse  :   0 dec   :  43 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   6 inc   :  14 jmp   :   0 
ld    :   4 ldd   :   0 ldi   : 208 lds   :   0 lpm   :   7 lsl   :   0 
lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  18 or    :   0 ori   :   0 out   :  54 pop   : 129 
push  : 129 rcall :  17 ret   :   1 reti  :   0 rjmp  :  58 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   6 sbic  :   0 sbis  :  29 
sbiw  :  43 sbr   :   0 sbrc  :   4 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   3 sleep :   0 spm   :   0 st    :  15 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 25 out of 113 (22.1%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00085e   1902    240   2142   32768   6.5%
[.dseg] 0x000060 0x000074      0     20     20    2048   1.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
