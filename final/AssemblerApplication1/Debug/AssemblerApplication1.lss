
AVRASM ver. 2.2.8  D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm Fri Jan 07 21:00:10 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(3): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\delay_function.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(4): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\set stack.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(5): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\compare.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(6): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\keypad.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(7): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\initUART.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(8): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\send_string.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(9): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\receive_char.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m32def.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(3): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\delay_function.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(4): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\set stack.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(5): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\compare.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(6): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\keypad.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(7): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\initUART.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(8): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\send_string.inc'
D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\main.asm(9): Including file 'D:\Ahmed\ﬂ·Ì…\microprocessor project\final\AssemblerApplication1\receive_char.inc'
                                 
                                 ;	including all libraries................................................
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 .include	"m32def.inc"			;atmega32	library
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 .include	"delay_function.inc"
                                 
                                 ;push the 3 registers that we will use  
                                 push r20 
                                 push r24
                                 push r25
                                 
                                 
                                 ldi r20,@0/10		; the delay time entered by the user 
                                 
                                 outerloop:										; outer loop
                                 			ldi		r24,LOW(2499)					; initialize itirators at the begining each time
                                 			ldi		r25,HIGH(2499) 
                                 
                                 innerloop:
                                 			sbiw	r24,1
                                 			brne	innerloop					; loop (i) times
                                 
                                 			dec		r20 
                                 			brne	outerloop					; loop (r20) times
                                 
                                 ;pop the registers again
                                 pop r25
                                 pop r24
                                 pop r20
                                 .include	"set stack.inc"
                                 
                                 
                                 ldi		r16,LOW(RAMEND)  ;first address of stack segmant 
                                 out		SPL,r16
                                 ldi		r16,HIGH(RAMEND) 
                                 out		SPH,r16
                                 
                                 .include	"compare.inc"
                                 
                                 	cpi	r23,@0
                                 	brne	no
                                 	cpi	r22,@1
                                 	brne	no
                                 	cpi	r21,@2
                                 	brne	no
                                 	cpi	r20,@3
                                 	brne	no
                                 	SEZ							;set zero flag
                                 	rjmp	end
                                 no:
                                 	CLZ							;clear zero flag
                                 end:
                                 	nop
                                 .include	"keypad.inc"
                                 
                                 ;............................keypad.......................................................
                                 clear:						;re-inialize Y pointer
                                 	ldi	YL,LOW(id)
                                 	ldi	YH,HIGH(id)
                                 	ldi	r18,0
                                 	st	Y,r18
                                 	ldi	r19,0				;clearing register (incrementer)
                                 startk:			
                                 	ldi r16,0x01			;HIGH row 1
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next1
                                 	rcall	hold
                                 	ldi	r18,1
                                 	adiw	Y,1
                                 	st	Y,r18	
                                 	inc	r19
                                 next1:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next2
                                 	rcall	hold
                                 	ldi	r18,2
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next2:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next3
                                 	rcall	hold
                                 	ldi	r18,3
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next3:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next4
                                 	rcall	hold
                                 	ldi	r18,'A'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next4:
                                 	ldi r16,0x02				;;HIGH row 2
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next5
                                 	rcall	hold
                                 	ldi	r18,4
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next5:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next6
                                 	rcall	hold
                                 	ldi	r18,5
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next6:		
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next7
                                 	rcall	hold
                                 	ldi	r18,6
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next7:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next8
                                 	rcall	hold
                                 	ldi	r18,'B'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next8:
                                 	ldi r16,0x04			;HIGH row 3
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next9
                                 	rcall	hold
                                 	ldi	r18,7
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next9:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next10
                                 	rcall	hold
                                 	ldi	r18,8
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next10:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next11
                                 	rcall	hold
                                 	ldi	r18,9
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next11:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	next12
                                 	rcall	hold
                                 	rjmp	a
                                 next12:
                                 	ldi r16,0x08				;HIGH row 4
                                 	out PORTB,r16
                                 	nop
                                 	sbis	PINB,PINB4		;check col 1
                                 	rjmp	next13
                                 	rcall	hold
                                 	ldi	r18,'*'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next13:
                                 	sbis	PINB,PINB5		;check col 2
                                 	rjmp	next14
                                 	rcall	hold
                                 	ldi	r18,0
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 next14:
                                 	sbis	PINB,PINB6		;check col 3
                                 	rjmp	next15
                                 	rcall	hold
                                 	rjmp	check
                                 next15:
                                 	sbis	PINB,PINB7		;check col 4
                                 	rjmp	khatar
                                 	rcall	hold
                                 	ldi	r18,'D'
                                 	adiw	Y,1
                                 	st	Y,r18
                                 	inc	r19
                                 khatar:
                                 	sbis	PINA,1
                                 	rjmp	exit
                                 
                                 rjmp  startk
                                 
                                 hold:
                                 	ldi	r16,2
                                 	out	PORTC,r16
                                 	in	r16,PINB
                                 	sbrc	r16,4
                                 	rjmp hold
                                 	sbrc	r16,5
                                 	rjmp hold
                                 	sbrc	r16,6
                                 	rjmp hold
                                 	sbrc	r16,7
                                 	rjmp hold
                                 	ldi	r16,0
                                 	out	PORTC,r16
                                 	ret
                                 
                                 check:
                                 	cpi	r19,4				;r19 --> incrementer
                                 	brne	a				;mdkhlsh 4 arkam .........
                                 	rjmp	set_id	
                                 a:
                                 	delay	500
                                 	ldi	r16,2				;HIGH buzz
                                 	out	PORTC,r16
                                 	delay	500
                                 	ldi	r16,0				;LOW buzz
                                 	out	PORTC,r16
                                 	delay	500
                                 	ldi	r16,2				;HIGH buzz
                                 	out	PORTC,r16
                                 	delay	500
                                 	ldi	r16,0
                                 	out	PORTC,r16
                                 	delay	500
                                 	rjmp	clear
                                 
                                 set_id:
                                 	nop
                                 	adiw	Y,1
                                 	nop
                                 	ld	r20,-Y
                                 	ld	r21,-Y
                                 	ld	r22,-Y
                                 	ld	r23,-Y
                                 	nop
                                 exit:
                                 .endmacro
                                 .include	"initUART.inc"
                                 
                                 
                                 ldi	r16,12		; load baud rate  [(F_CPU/(BouadRate*8))-1]  (boudrate = 9600) (elvalue de mawgoda f eldatasheet)
                                 ldi	r17,0
                                 
                                 out UBRRH, r17							;UART baud rate register
                                 out UBRRL, r16
                                 
                                 ;	double speed mode
                                 sbi	UCSRA,U2X							;UART control statue register A
                                 
                                 ; Enable receiver and transmitter
                                 ldi r16, (1<<RXEN)|(1<<TXEN)
                                 out UCSRB,r16							;UART control statue register B
                                 
                                 ; Set frame format: 8data bit , 2stop bit
                                 ldi r16, (1<<URSEL)|(1<<USBS)|(3<<UCSZ0)
                                 out UCSRC,r16							;UART control statue register C
                                 
                                 .endmacro
                                 .include	"send_string.inc"
                                 
                                 
                                 ldi	ZL,LOW(2*@0)			; load Z pointer with
                                 ldi	ZH,HIGH(2*@0)
                                 
                                 
                                 puts:	lpm	r16,Z+				; load character from pmem
                                 	cpi	r16,0x00				; check if null
                                 	breq	puts_end
                                 
                                 	puts_wait:
                                 	sbis UCSRA,UDRE			; wait for empty transmit buffer
                                 	rjmp	puts_wait
                                 
                                 	out	UDR,r16			; transmit character
                                 	rjmp	puts
                                 
                                 	puts_end:
                                 	nop
                                 .include	"receive_char.inc"
                                 
                                 
                                 	wait:
                                 ; Wait for data to be received
                                 sbis UCSRA, RXC
                                 rjmp wait
                                 
                                 ; Get and return received data from buffer
                                 in @0, UDR
                                 
                                 ;................................................................................................
                                 .dseg
                                 .org	SRAM_START
                                 
000060                           id:	.byte	20
                                 ;................................................................................................
                                 .cseg
                                 .org	0x00
                                 
000000 e50f
000001 bf0d
000002 e008
000003 bf0e                      	init_stack			;initialize stack by calling its macro
000004 e00c
000005 e010
000006 bd10
000007 b909
000008 9a59
000009 e108
00000a b90a
00000b e80e
00000c bd00                      	init_UART			;initialize	UART (bleutooth)
                                 ;................................................................................................
                                 ;declaring i/o pins ....................................................
00000d ef0f                      	ldi r16,0xff		;make PORT C pin all output 
00000e bb04                      	out DDRC,r16		
                                 	;pin0	=	relay
                                 	;pin1	=	buzz
                                 	;pin2	=	led green
                                 	;pin3	=	led blue
                                 	;pin4	=	led red
                                 
00000f e000                      	ldi	r16,0			;make PORT A pin all input
000010 bb0a                      	out	DDRA,r16
                                 	;pin0	=	sensor_open
                                 	;pin1	=	sensor_alarm
                                 	;pin7	=	bleutooth state  (INPUT)
                                 
                                 	;cbi	DDRD,7			;pin7 in PORTD input for bleutooth state pin 	
                                 ;................................................................................................
                                 ;............................keypad.......................................................
000011 e00f                      	ldi r16,0x0f			;first 4pins (ROWS) input ... last 4pins (COLS) output
000012 bb07                      	out DDRB,r16
                                 ;................................................................................................
                                 
                                 start:
000013 e000                      	ldi	r16,0			;all pins LOW
000014 bb04                      	out DDRC,r16
                                 ;wait untill bleutooth connected...............................................		
                                 	connect:
000015 9aac                      		sbi		PORTC,4				;HIGH Red Led
000016 9bcf                      		sbis	PINA,7
000017 cffd                      		rjmp	connect
                                 ;................................................................................................
000018 934f
000019 938f
00001a 939f
00001b e248
00001c ec83
00001d e099
00001e 9701
00001f f7f1
000020 954a
000021 f7d1
000022 919f
000023 918f
000024 914f                      	delay	400
000025 e6e2
000026 e0f6
000027 9105
000028 3000
000029 f021
00002a 9b5d
00002b cffe
00002c b90c
00002d cff9
00002e 0000                      	write	welcome				;write elkhazna gahza llsho3'l
00002f 9aac                      	sbi		PORTC,4				;HIGH Red Led
000030 9aab                      	sbi		PORTC,3 			;HIGH blue Led
000031 9aaa                      	sbi		PORTC,2				;HIGH green Led
000032 934f
000033 938f
000034 939f
000035 e04a
000036 ec83
000037 e099
000038 9701
000039 f7f1
00003a 954a
00003b f7d1
00003c 919f
00003d 918f
00003e 914f                      	delay	100
                                 ;................................................................................................
                                 ;............................keypad.......................................................
00003f e6c0
000040 e0d0
000041 e020
000042 8328
000043 e030
000044 e001
000045 bb08
000046 0000
000047 9bb4
000048 c005
000049 d073
00004a e021
00004b 9621
00004c 8328
00004d 9533
00004e 9bb5
00004f c005
000050 d06c
000051 e022
000052 9621
000053 8328
000054 9533
000055 9bb6
000056 c005
000057 d065
000058 e023
000059 9621
00005a 8328
00005b 9533
00005c 9bb7
00005d c005
00005e d05e
00005f e421
000060 9621
000061 8328
000062 9533
000063 e002
000064 bb08
000065 0000
000066 9bb4
000067 c005
000068 d054
000069 e024
00006a 9621
00006b 8328
00006c 9533
00006d 9bb5
00006e c005
00006f d04d
000070 e025
000071 9621
000072 8328
000073 9533
000074 9bb6
000075 c005
000076 d046
000077 e026
000078 9621
000079 8328
00007a 9533
00007b 9bb7
00007c c005
00007d d03f
00007e e422
00007f 9621
000080 8328
000081 9533
000082 e004
000083 bb08
000084 0000
000085 9bb4
000086 c005
000087 d035
000088 e027
000089 9621
00008a 8328
00008b 9533
00008c 9bb5
00008d c005
00008e d02e
00008f e028
000090 9621
000091 8328
000092 9533
000093 9bb6
000094 c005
000095 d027
000096 e029
000097 9621
000098 8328
000099 9533
00009a 9bb7
00009b c002
00009c d020
00009d c030
00009e e008
00009f bb08
0000a0 0000
0000a1 9bb4
0000a2 c005
0000a3 d019
0000a4 e22a
0000a5 9621
0000a6 8328
0000a7 9533
0000a8 9bb5
0000a9 c005
0000aa d012
0000ab e020
0000ac 9621
0000ad 8328
0000ae 9533
0000af 9bb6
0000b0 c002
0000b1 d00b
0000b2 c018
0000b3 9bb7
0000b4 c005
0000b5 d007
0000b6 e424
0000b7 9621
0000b8 8328
0000b9 9533
0000ba 9bc9
0000bb c064
0000bc cf87
0000bd e002
0000be bb05
0000bf b306
0000c0 fd04
0000c1 cffb
0000c2 fd05
0000c3 cff9
0000c4 fd06
0000c5 cff7
0000c6 fd07
0000c7 cff5
0000c8 e000
0000c9 bb05
0000ca 9508
0000cb 3034
0000cc f409
0000cd c04a
0000ce 934f
0000cf 938f
0000d0 939f
0000d1 e342
0000d2 ec83
0000d3 e099
0000d4 9701
0000d5 f7f1
0000d6 954a
0000d7 f7d1
0000d8 919f
0000d9 918f
0000da 914f
0000db e002
0000dc bb05
0000dd 934f
0000de 938f
0000df 939f
0000e0 e342
0000e1 ec83
0000e2 e099
0000e3 9701
0000e4 f7f1
0000e5 954a
0000e6 f7d1
0000e7 919f
0000e8 918f
0000e9 914f
0000ea e000
0000eb bb05
0000ec 934f
0000ed 938f
0000ee 939f
0000ef e342
0000f0 ec83
0000f1 e099
0000f2 9701
0000f3 f7f1
0000f4 954a
0000f5 f7d1
0000f6 919f
0000f7 918f
0000f8 914f
0000f9 e002
0000fa bb05
0000fb 934f
0000fc 938f
0000fd 939f
0000fe e342
0000ff ec83
000100 e099
000101 9701
000102 f7f1
000103 954a
000104 f7d1
000105 919f
000106 918f
000107 914f
000108 e000
000109 bb05
00010a 934f
00010b 938f
00010c 939f
00010d e342
00010e ec83
00010f e099
000110 9701
000111 f7f1
000112 954a
000113 f7d1
000114 919f
000115 918f
000116 914f
000117 cf27
000118 0000
000119 9621
00011a 0000
00011b 914a
00011c 915a
00011d 916a
00011e 917a
00011f 0000                      	read_id						;start reading id
                                 ;...............................................................................
                                 ;........check if khatar .......................................................
000120 9bc9                      	sbis	PINA,1
000121 c1ac                      	rjmp	khataar				;khatar................
                                 ;...............................................................................
                                 ;........no khatar .......................................................
000122 0000                      	nop							;no operation	(used for syncronyzation)
000123 934f
000124 938f
000125 939f
000126 e342
000127 ec83
000128 e099
000129 9701
00012a f7f1
00012b 954a
00012c f7d1
00012d 919f
00012e 918f
00012f 914f                      	delay	500
000130 e002                      	ldi	r16,2					;blink buzzer   (teet teet)
000131 bb05                      	out PORTC,r16
000132 934f
000133 938f
000134 939f
000135 e144
000136 ec83
000137 e099
000138 9701
000139 f7f1
00013a 954a
00013b f7d1
00013c 919f
00013d 918f
00013e 914f                      	delay	200
00013f e000                      	ldi	r16,0
000140 bb05                      	out PORTC,r16
000141 934f
000142 938f
000143 939f
000144 e144
000145 ec83
000146 e099
000147 9701
000148 f7f1
000149 954a
00014a f7d1
00014b 919f
00014c 918f
00014d 914f                      	delay	200
00014e e002                      	ldi	r16,2
00014f bb05                      	out PORTC,r16
000150 934f
000151 938f
000152 939f
000153 e144
000154 ec83
000155 e099
000156 9701
000157 f7f1
000158 954a
000159 f7d1
00015a 919f
00015b 918f
00015c 914f                      	delay	200
00015d e000                      	ldi	r16,0
00015e bb05                      	out PORTC,r16
00015f 934f
000160 938f
000161 939f
000162 e144
000163 ec83
000164 e099
000165 9701
000166 f7f1
000167 954a
000168 f7d1
000169 919f
00016a 918f
00016b 914f                      	delay	200
                                 ;...............................................................................
                                 ;........ckecking id .......................................................
00016c 3071
00016d f441
00016e 3062
00016f f431
000170 3053
000171 f421
000172 3044
000173 f411
000174 9418
000175 c001
000176 9498
000177 0000                      	is	1,2,3,4					;check if it is the id of "ahmed" 
000178 f129                      	breq	is_ahmed			;true, write ahmed
000179 3075
00017a f441
00017b 3066
00017c f431
00017d 3057
00017e f421
00017f 3048
000180 f411
000181 9418
000182 c001
000183 9498
000184 0000                      	is	5,6,7,8					;false, check if it is the id of "gemy" and so on ......
000185 f119                      	breq	is_gemy	
000186 3071
000187 f441
000188 3064
000189 f431
00018a 3057
00018b f421
00018c 3048
00018d f411
00018e 9418
00018f c001
000190 9498
000191 0000                      	is	1,4,7,8
000192 f109                      	breq	is_sara
                                 
000193 efec
000194 e0f5
000195 9105
000196 3000
000197 f021
000198 9b5d
000199 cffe
00019a b90c
00019b cff9
00019c 0000                      	write	unknown				;if it is not known id  
00019d c021                      	rjmp	try					;write is trying to open ..........
                                 is_ahmed:
00019e e0ec
00019f e0f6
0001a0 9105
0001a1 3000
0001a2 f021
0001a3 9b5d
0001a4 cffe
0001a5 b90c
0001a6 cff9
0001a7 0000                      	write	ahmed
0001a8 c016                      	rjmp	try
                                 is_gemy:
0001a9 e1e4
0001aa e0f6
0001ab 9105
0001ac 3000
0001ad f021
0001ae 9b5d
0001af cffe
0001b0 b90c
0001b1 cff9
0001b2 0000                      	write	gemy
0001b3 c00b                      	rjmp	try
                                 is_sara:
0001b4 e1ea
0001b5 e0f6
0001b6 9105
0001b7 3000
0001b8 f021
0001b9 9b5d
0001ba cffe
0001bb b90c
0001bc cff9
0001bd 0000                      	write	sara
0001be c000                      	rjmp	try
                                 try:
0001bf e2ee
0001c0 e0f6
0001c1 9105
0001c2 3000
0001c3 f021
0001c4 9b5d
0001c5 cffe
0001c6 b90c
0001c7 cff9
0001c8 0000                      	write trying
                                 ;..................................................................................
                                 ;........wait for response from owner .......................................................
0001c9 e008                      	ldi	r16,8					;HIGH blue led
0001ca bb05                      	out PORTC,r16		
                                 
0001cb 9b5f
0001cc cffe
0001cd b10c                      	read	r16					;read bleutooth (wait untill user tell me what shoud i do)
                                 ;..................................................................................
                                 ;........take order  .......................................................
0001ce 3301                      	cpi	r16,'1'					;'1' means allow
0001cf f409                      	brne	a
0001d0 c07c                      	rjmp	allow	
                                 a:				
0001d1 3302                      	cpi	r16,'2'					;'2' means reject
0001d2 f409                      	brne	b
0001d3 c001                      	rjmp	reject
                                 b:
0001d4 c03c                      	rjmp	alarm				;otherwise	 alarm 
                                 ;..................................................................................	
                                 reject:
                                 ;blink buzz & red led...............
0001d5 934f
0001d6 938f
0001d7 939f
0001d8 e342
0001d9 ec83
0001da e099
0001db 9701
0001dc f7f1
0001dd 954a
0001de f7d1
0001df 919f
0001e0 918f
0001e1 914f                      	delay	500
0001e2 e013                      	ldi	r17,3					;loop 3 times
                                 	loopr:
0001e3 e102                      	ldi	r16,0b00010010			;HIGH
0001e4 bb05                      	out PORTC,r16
0001e5 934f
0001e6 938f
0001e7 939f
0001e8 e446
0001e9 ec83
0001ea e099
0001eb 9701
0001ec f7f1
0001ed 954a
0001ee f7d1
0001ef 919f
0001f0 918f
0001f1 914f                      	delay	700
0001f2 e000                      	ldi	r16,0					;LOW
0001f3 bb05                      	out PORTC,r16
0001f4 934f
0001f5 938f
0001f6 939f
0001f7 e446
0001f8 ec83
0001f9 e099
0001fa 9701
0001fb f7f1
0001fc 954a
0001fd f7d1
0001fe 919f
0001ff 918f
000200 914f                      	delay	700
000201 951a                      	dec	r17
000202 f701                      	brne	loopr
000203 934f
000204 938f
000205 939f
000206 ef4a
000207 ec83
000208 e099
000209 9701
00020a f7f1
00020b 954a
00020c f7d1
00020d 919f
00020e 918f
00020f 914f                      	delay	2500
000210 ce02                      	rjmp	start						;return to start
                                 ;..................................................................................
                                 alarm:
                                 ;blink buzz & red led (quickly)...............
000211 934f
000212 938f
000213 939f
000214 e342
000215 ec83
000216 e099
000217 9701
000218 f7f1
000219 954a
00021a f7d1
00021b 919f
00021c 918f
00021d 914f                      	delay	500
00021e e018                      	ldi	r17,8					;loop 8 times
                                 	loopa:
00021f e102                      	ldi	r16,0b00010010			;HIGH
000220 bb05                      	out PORTC,r16
000221 934f
000222 938f
000223 939f
000224 e144
000225 ec83
000226 e099
000227 9701
000228 f7f1
000229 954a
00022a f7d1
00022b 919f
00022c 918f
00022d 914f                      	delay	200
00022e e000                      	ldi	r16,0					;LOW
00022f bb05                      	out PORTC,r16
000230 934f
000231 938f
000232 939f
000233 e144
000234 ec83
000235 e099
000236 9701
000237 f7f1
000238 954a
000239 f7d1
00023a 919f
00023b 918f
00023c 914f                      	delay	200
00023d 951a                      	dec	r17
00023e f701                      	brne	loopa
00023f 934f
000240 938f
000241 939f
000242 ef4a
000243 ec83
000244 e099
000245 9701
000246 f7f1
000247 954a
000248 f7d1
000249 919f
00024a 918f
00024b 914f                      	delay	2500
00024c cdc6                      	rjmp	start						;return to start
                                 ;..................................................................................
                                 allow:
00024d 934f
00024e 938f
00024f 939f
000250 e342
000251 ec83
000252 e099
000253 9701
000254 f7f1
000255 954a
000256 f7d1
000257 919f
000258 918f
000259 914f                      	delay	500
00025a eaec
00025b e0f6
00025c 9105
00025d 3000
00025e f021
00025f 9b5d
000260 cffe
000261 b90c
000262 cff9
000263 0000                      	write	pass						;request the owner password
000264 934f
000265 938f
000266 939f
000267 e04a
000268 ec83
000269 e099
00026a 9701
00026b f7f1
00026c 954a
00026d f7d1
00026e 919f
00026f 918f
000270 914f                      	delay	100
                                 
000271 9b5f
000272 cffe
000273 b10c                      	read	r16							;read the first character of the password
000274 9b5f
000275 cffe
000276 b11c                      	read	r17							;read the second character of the password
000277 9b5f
000278 cffe
000279 b12c                      	read	r18							;read the third character of the password
00027a 9b5f
00027b cffe
00027c b13c                      	read	r19							;read the fourth character of the password
                                 ;the password is "0000"...................................................................................
00027d 3300                      	cpi	r16,'0'							;alarm if any digit of entered password	is mistake
00027e f431                      	brne	c							
00027f 3310                      	cpi	r17,'0'
000280 f421                      	brne	c							
000281 3320                      	cpi	r18,'0'
000282 f411                      	brne	c
000283 3330                      	cpi	r19,'0'
000284 f009                      	breq	correct
                                 c:
000285 cf8b                      	rjmp	alarm
                                 
                                 correct:		
                                 ;correct password.............................................................
000286 934f
000287 938f
000288 939f
000289 e144
00028a ec83
00028b e099
00028c 9701
00028d f7f1
00028e 954a
00028f f7d1
000290 919f
000291 918f
000292 914f                      	delay	200
000293 e006                      	ldi	r16,0b00000110					;HIGH buzz & green led
000294 bb05                      	out PORTC,r16
000295 934f
000296 938f
000297 939f
000298 e540
000299 ec83
00029a e099
00029b 9701
00029c f7f1
00029d 954a
00029e f7d1
00029f 919f
0002a0 918f
0002a1 914f                      	delay	800
0002a2 98a9                      	cbi	PORTC,1							;LOW buzz 
                                 
0002a3 9aa8                      	sbi	PORTC,0							;HIGH relay		(open the khazna)
0002a4 934f
0002a5 938f
0002a6 939f
0002a7 e342
0002a8 ec83
0002a9 e099
0002aa 9701
0002ab f7f1
0002ac 954a
0002ad f7d1
0002ae 919f
0002af 918f
0002b0 914f                      	delay	500							;for 0.5 second
0002b1 98a8                      	cbi	PORTC,0							;LOW relay
                                 
0002b2 98aa                      	cbi	PORTC,2
0002b3 934f
0002b4 938f
0002b5 939f
0002b6 ef4a
0002b7 ec83
0002b8 e099
0002b9 9701
0002ba f7f1
0002bb 954a
0002bc f7d1
0002bd 919f
0002be 918f
0002bf 914f                      	delay	2500
0002c0 934f
0002c1 938f
0002c2 939f
0002c3 ef4a
0002c4 ec83
0002c5 e099
0002c6 9701
0002c7 f7f1
0002c8 954a
0002c9 f7d1
0002ca 919f
0002cb 918f
0002cc 914f                      	delay	2500
0002cd cd45                      	rjmp	start
                                 ;..................................................................................
                                 khataar:
                                 	
0002ce e8e2
0002cf e0f6
0002d0 9105
0002d1 3000
0002d2 f021
0002d3 9b5d
0002d4 cffe
0002d5 b90c
0002d6 cff9
0002d7 0000                      	write	khatar
                                 
0002d8 e01a                      	ldi	r17,10
                                 	loopk:
0002d9 e10e                      	ldi	r16,0b00011110			;HIGH	all (buzz,green,red,blue)
0002da bb05                      	out PORTC,r16
0002db 934f
0002dc 938f
0002dd 939f
0002de e144
0002df ec83
0002e0 e099
0002e1 9701
0002e2 f7f1
0002e3 954a
0002e4 f7d1
0002e5 919f
0002e6 918f
0002e7 914f                      	delay	200
0002e8 e000                      	ldi	r16,0					;LOW	all (buzz,green,red,blue)
0002e9 bb05                      	out PORTC,r16
0002ea 934f
0002eb 938f
0002ec 939f
0002ed e144
0002ee ec83
0002ef e099
0002f0 9701
0002f1 f7f1
0002f2 954a
0002f3 f7d1
0002f4 919f
0002f5 918f
0002f6 914f                      	delay	200
0002f7 951a                      	dec	r17
0002f8 f701                      	brne	loopk	
                                 
0002f9 b12c                      	in	r18,UDR
0002fa 3421                      	cpi	r18,'A'
0002fb f009                      	breq	d
0002fc cfd1                      	rjmp	khataar
                                 d:
0002fd cd15                      	rjmp	start	
                                 ;............................................................................................................................
                                 ;	declaring all strings ................................................................
                                 	;(\n = 0x0d)
0002fe 550d
0002ff 6b6e
000300 6f6e
000301 6e77
000302 7020
000303 7265
000304 6f73
000305 006e                      	unknown:	.db		0x0d,"Unknown person",0x00				;writing in program memory
000306 610d
000307 6d68
000308 6465
000309 0020                      	ahmed:		.db		0x0d,"ahmed ",0x00
00030a 670d
00030b 6d65
00030c 0079                      	gemy:		.db		0x0d,"gemy",0x00
00030d 730d
00030e 7261
00030f 0061                      	sara:		.db		0x0d,"sara",0x00
000310 640d
000311 336f
000312 3261
000313 0020                      	do3aa:		.db		0x0d,"do3a2 ",0x00
000314 610d
000315 6179
000316 0020                      	aya:		.db		0x0d,"aya ",0x00
000317 6920
000318 2073
000319 7274
00031a 6979
00031b 676e
00031c 7420
00031d 206f
00031e 706f
00031f 6e65
000320 7420
000321 6568
000322 6b20
000323 6168
000324 6e7a
000325 0d61
000326 770d
000327 6168
000328 2074
000329 6873
00032a 756f
00032b 646c
00032c 6920
00032d 6420
00032e 3f6f
00032f 0d21
000330 000d                      	trying:		.db		" is trying to open the khazna",0x0d,0x0d,"what should i do?!",0x0d,0x0d,0x00
                                 
000331 650d
000332 6b6c
000333 6168
000334 6e7a
000335 2061
000336 6167
000337 7a68
000338 2061
000339 6c6c
00033a 6873
00033b 336f
00033c 6c27
00033d 2e2e
00033e 2e2e
00033f 212e
000340 000d                      	welcome:	.db		0x0d,"elkhazna gahza llsho3'l.....!",0x0d,0x00
000341 650d
000342 6b6c
000343 6168
000344 6e7a
000345 2061
000346 2066
000347 6135
000348 7474
000349 6161
00034a 6161
00034b 6161
00034c 6161
00034d 6161
00034e 6161
00034f 6161
000350 2e72
000351 2e2e
000352 212e
000353 2121
000354 2121
000355 000d                      	khatar:		.db		0x0d,"elkhazna f 5attaaaaaaaaaaaaaar....!!!!!",0x0d,0x00
000356 650d
000357 746e
000358 7265
000359 7420
00035a 6568
00035b 7020
00035c 7361
00035d 7773
00035e 726f
00035f 2e64
000360 2e2e
000361 212e
000362 000d                      	pass:		.db		0x0d,"enter the password....!",0x0d,0x00
000363 650d
000364 6b6c
000365 6168
000366 6e7a
000367 2061
000368 7465
000369 6166
00036a 3774
00036b 2065
00036c 000d                      	open:		.db		0x0d,"elkhazna etfat7e ",0x0d,0x00
00036d 650d
00036e 6b6c
00036f 6168
000370 6e7a
000371 2061
000372 7465
000373 6632
000374 746c
000375 000d                      	close:		.db		0x0d,"elkhazna et2flt",0x0d,0x00
                                 ;................................................................................................................................	
                                 ;............................................................................................................................


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   0 y  :  34 z  :   8 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  96 r17:  10 r18:  34 r19:  18 r20: 120 
r21:   4 r22:   4 r23:   4 r24: 116 r25:  87 r26:   0 r27:   0 r28:   1 
r29:   1 r30:   8 r31:   8 
Registers used: 16 out of 35 (45.7%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :  15 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  13 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  79 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   3 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   3 com   :   0 cp    :   0 cpc   :   0 
cpi   :  28 cpse  :   0 dec   :  32 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 inc   :  14 jmp   :   0 
ld    :   4 ldd   :   0 ldi   : 156 lds   :   0 lpm   :   8 lsl   :   0 
lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  19 or    :   0 ori   :   0 out   :  40 pop   :  87 
push  :  87 rcall :  16 ret   :   1 reti  :   0 rjmp  :  65 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   6 sbic  :   0 sbis  :  32 
sbiw  :  29 sbr   :   0 sbrc  :   4 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   3 sleep :   0 spm   :   0 st    :  15 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 25 out of 113 (22.1%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006ec   1532    240   1772   32768   5.4%
[.dseg] 0x000060 0x000074      0     20     20    2048   1.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
